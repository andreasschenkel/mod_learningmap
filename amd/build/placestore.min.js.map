{"version":3,"file":"placestore.min.js","sources":["../src/placestore.js"],"sourcesContent":["let placestore = {\n    version: 2024072201,\n    id: 0,\n    places: [],\n    paths: [],\n    startingplaces: [],\n    targetplaces: [],\n    placecolor: '#c01c28ff',\n    strokecolor: '#ffffffff',\n    strokeopacity: 1,\n    textcolor: '#ffffffff',\n    visitedcolor: '#26a269ff',\n    height: 100,\n    width: 800,\n    hidepaths: false,\n    mapid: '',\n    usecheckmark: false,\n    editmode: true,\n    pulse: false,\n    hover: false,\n    showall: false,\n    showtext: false,\n    slicemode: false,\n    showwaygone: false,\n    placesize: 10,\n    /**\n     * Loads attributes from JSON into placestore\n     * @param {*} json\n     */\n    loadJSON: function(json) {\n        try {\n            let fromjson = JSON.parse(json);\n            if (fromjson.textcolor === null) {\n                fromjson.textcolor = fromjson.strokecolor;\n            }\n            Object.assign(this, fromjson);\n            // eslint-disable-next-line no-empty\n        } catch { }\n        // Update version (only relevant if learning map is saved)\n        this.version = 2024072201;\n    },\n    /**\n     * Returns placestore as a JSON string ()\n     * @returns {string}\n     */\n    buildJSON: function() {\n        return JSON.stringify(this.getPlacestore());\n    },\n    /**\n     * Adds a place. If it is the only place, it is set as starting place\n     * @param {*} id id of the place\n     * @param {*} linkId id of the corresponding link\n     * @param {*} linkedActivity course module id of linked activity\n     */\n    addPlace: function(id, linkId, linkedActivity = null) {\n        this.places.push({\n            id: id,\n            linkId: linkId,\n            linkedActivity: linkedActivity,\n            placecolor: null,\n            visitedcolor: null\n        });\n        if (this.places.length == 1) {\n            this.addStartingPlace(id);\n        }\n        this.id++;\n    },\n    /**\n     * Removes a place\n     * @param {*} id id of the place\n     */\n    removePlace: function(id) {\n        this.removeStartingPlace(id);\n        this.removeTargetPlace(id);\n        this.places = this.places.filter(\n            function(p) {\n                return p.id != id;\n            }\n        );\n    },\n    /**\n     * Adds a place to the array of starting places\n     * @param {*} id id of the place\n     */\n    addStartingPlace: function(id) {\n        this.startingplaces.push(id);\n    },\n    /**\n     * Removes a place from the array of starting places\n     * @param {*} id id of the place\n     */\n    removeStartingPlace: function(id) {\n        this.startingplaces = this.startingplaces.filter(\n            function(e) {\n                return e != id;\n            }\n        );\n    },\n    /**\n     * Returns whether a place is in the array of starting places\n     * @param {*} id id of the place\n     * @returns {boolean}\n     */\n    isStartingPlace: function(id) {\n        return this.startingplaces.includes(id);\n    },\n    /**\n     * Adds a place to the array of target places\n     * @param {*} id id of the place\n     */\n    addTargetPlace: function(id) {\n        this.targetplaces.push(id);\n    },\n    /**\n     * Removes a place from the array of target places\n     * @param {*} id id of the place\n     */\n    removeTargetPlace: function(id) {\n        this.targetplaces = this.targetplaces.filter(\n            function(e) {\n                return e != id;\n            }\n        );\n    },\n    /**\n     * Returns whether a place is in the array of target places\n     * @param {number} id id of the place\n     * @returns {boolean}\n     */\n    isTargetPlace: function(id) {\n        return this.targetplaces.includes(id);\n    },\n    /**\n     * Adds a path between two places\n     * @param {*} pid id of the path\n     * @param {*} fid id of the first place\n     * @param {*} sid id of the second place\n     */\n    addPath: function(pid, fid, sid) {\n        this.paths.push({\n            id: pid,\n            fid: fid,\n            sid: sid,\n            strokecolor: null,\n            strokedasharray: null,\n            hidepath: null\n        });\n    },\n    /**\n     * Removes a path\n     * @param {*} id id of the place\n     */\n    removePath: function(id) {\n        this.paths = this.paths.filter(\n            function(p) {\n                return p.id != id;\n            }\n        );\n    },\n    /**\n     * Returns an array of paths touching a place\n     * @param {*} id id of the place\n     * @returns {array}\n     */\n    getTouchingPaths: function(id) {\n        return this.paths.filter(\n            function(p) {\n                return p.fid == id || p.sid == id;\n            }\n        );\n    },\n    /**\n     * Returns the course module id linked to a place\n     * @param {*} id id of the place\n     * @returns {number} id of the linked course module\n     */\n    getActivityId: function(id) {\n        let place = this.places.filter(\n            function(e) {\n                return id == e.id;\n            }\n        );\n        if (place.length > 0) {\n            return place[0].linkedActivity;\n        } else {\n            return null;\n        }\n    },\n    /**\n     * Sets the id of the linked course module\n     * @param {*} id id of the place\n     * @param {*} linkedActivity course module id\n     */\n    setActivityId: function(id, linkedActivity) {\n        let place = this.places.filter(\n            function(e) {\n                return id == e.id;\n            }\n        );\n        if (place.length > 0) {\n            place[0].linkedActivity = linkedActivity;\n        }\n    },\n    /**\n     * Returns the current id\n     * @returns {number}\n     */\n    getId: function() {\n        return this.id;\n    },\n    /**\n     * Sets the dimensions of the background image\n     * @param {*} width\n     * @param {*} height\n     */\n    setBackgroundDimensions: function(width, height) {\n        this.width = width;\n        this.height = height;\n    },\n    /**\n     * Returns all paths starting at a place\n     * @param {*} id id of the place\n     * @returns {array}\n     */\n    getPathsWithFid: function(id) {\n        return this.paths.filter(function(p) {\n            return p.fid == id;\n        });\n    },\n    /**\n     * Returns all paths ending at a place\n     * @param {*} id id of the place\n     * @returns {array}\n     */\n    getPathsWithSid: function(id) {\n        return this.paths.filter(function(p) {\n            return p.sid == id;\n        });\n    },\n    /**\n     * Returns the attributes of placestore\n     * @returns {object}\n     */\n    getPlacestore: function() {\n        return {\n            id: this.id,\n            places: this.places,\n            paths: this.paths,\n            startingplaces: this.startingplaces,\n            targetplaces: this.targetplaces,\n            placecolor: this.placecolor,\n            strokecolor: this.strokecolor,\n            strokeopacity: this.strokeopacity,\n            textcolor: this.textcolor,\n            visitedcolor: this.visitedcolor,\n            height: this.height,\n            width: this.width,\n            hidepaths: this.hidepaths,\n            mapid: this.mapid,\n            usecheckmark: this.usecheckmark,\n            editmode: this.editmode,\n            version: this.version,\n            pulse: this.pulse,\n            hover: this.hover,\n            showall: this.showall,\n            showtext: this.showtext,\n            slicemode: this.slicemode,\n            showwaygone: this.showwaygone,\n            placesize: this.placesize,\n        };\n    },\n    /**\n     * Sets hidepaths attribute\n     * @param {boolean} value\n     */\n    setHidePaths: function(value) {\n        this.hidepaths = value;\n    },\n    /**\n     * Returns the value of hidepaths attribute\n     * @returns {boolean}\n     */\n    getHidePaths: function() {\n        return this.hidepaths;\n    },\n    /**\n     * Sets pulse attribute\n     * @param {boolean} value\n     */\n    setPulse: function(value) {\n        this.pulse = value;\n    },\n    /**\n     * Returns the value of pulse attribute\n     * @returns {boolean}\n     */\n    getPulse: function() {\n        return this.pulse;\n    },\n    /**\n     * Sets hover attribute\n     * @param {boolean} value\n     */\n    setHover: function(value) {\n        this.hover = value;\n    },\n    /**\n     * Returns the value of hover attribute\n     * @returns {boolean}\n     */\n    getHover: function() {\n        return this.hover;\n    },\n    /**\n     * Sets showall attribute\n     * @param {boolean} value\n     */\n    setShowall: function(value) {\n        this.showall = value;\n    },\n    /**\n     * Returns the value of showall attribute\n     * @returns {boolean}\n     */\n    getShowall: function() {\n        return this.showall;\n    },\n    /**\n     * Returns the mapid\n     * @returns {string}\n     */\n    getMapid: function() {\n        return this.mapid;\n    },\n    /**\n     * Returns the value of usecheckmark attribute\n     * @returns {boolean}\n     */\n    getUseCheckmark: function() {\n        return this.usecheckmark;\n    },\n    /**\n     * Sets the value of usecheckmark attribute\n     * @param {boolean} value\n     */\n    setUseCheckmark: function(value) {\n        this.usecheckmark = value;\n    },\n    /**\n     * Returns an array with all activity ids\n     * @returns {array}\n     */\n    getAllActivities: function() {\n        let activities = [];\n        this.places.forEach(function(p) {\n            if (p.linkedActivity) {\n                activities.push(p.linkedActivity);\n            }\n        });\n        return activities;\n    },\n    /**\n     * Sets stroke opacity\n     * @param {number} value\n     */\n    setStrokeOpacity: function(value) {\n        this.strokeopacity = value;\n    },\n    /**\n     * Returns the current stroke opacity\n     * @returns {number}\n     */\n    getStrokeOpacity: function() {\n        return this.strokeopacity;\n    },\n    /**\n     * Sets stroke opacity to 0\n     * @param {number} value\n     */\n    setHideStroke: function(value) {\n        this.strokeopacity = (value ? 0 : 1);\n    },\n    /**\n     * Returns the current stroke opacity\n     * @returns {number}\n     */\n    getHideStroke: function() {\n        return this.strokeopacity < 1;\n    },\n    /**\n     * Returns the value of showtext attribute\n     * @returns {boolean}\n     */\n    getShowText: function() {\n        return this.showtext;\n    },\n    /**\n     * Sets the value of showtext attribute\n     * @param {boolean} value\n     */\n    setShowText: function(value) {\n        this.showtext = value;\n    },\n    /**\n     * Returns an array with all place identifiers\n     * @returns {array}\n     */\n    getPlaces: function() {\n        return this.places;\n    },\n    /**\n     * Returns if slicemode is enabled\n     * @returns {boolean}\n     */\n    getSliceMode: function() {\n        return this.slicemode;\n    },\n    /**\n     * Sets state of slicemode\n     * @param {boolean} value\n     */\n    setSliceMode: function(value) {\n        this.slicemode = value;\n    },\n    /**\n     * Returns if showwaygone is enabled\n     * @returns {boolean}\n     */\n    getShowWayGone: function() {\n        return this.showwaygone;\n    },\n    /**\n     * Sets state of showwaygone\n     * @param {boolean} value\n     */\n    setShowWayGone: function(value) {\n        this.showwaygone = value;\n    },\n    /**\n     * Returns the size of places\n     * @returns {number}\n     */\n    getPlaceSize: function() {\n        return this.placesize;\n    },\n    /**\n     * Sets the size of places\n     * @param {number} value\n     */\n    setPlaceSize: function(value) {\n        if (value > 0) {\n            this.placesize = value;\n        }\n    },\n    /**\n     * Sets the color of places\n     * @param {*} color\n     */\n    setPlaceColor: function(color) {\n        this.placecolor = color;\n    },\n    /**\n     * Returns the color of places\n     * @returns {string}\n     */\n    getPlaceColor: function() {\n        return this.placecolor;\n    },\n    /**\n     * Sets the color of visited places\n     * @param {*} color\n     */\n    setVisitedColor: function(color) {\n        this.visitedcolor = color;\n    },\n    /**\n     * Returns the color of visited places\n     * @returns {string}\n     */\n    getVisitedColor: function() {\n        return this.visitedcolor;\n    },\n    /**\n     * Sets the color of strokes and the text\n     * @param {*} color\n     */\n    setStrokeColor: function(color) {\n        this.strokecolor = color;\n        // Until there is a separate text color, set it to the same color as the stroke.\n        this.textcolor = color;\n    },\n    /**\n     * Returns the color of strokes\n     * @returns {string}\n     */\n    getStrokeColor: function() {\n        return this.strokecolor;\n    },\n};\n\nexport default placestore;\n"],"names":["placestore","version","id","places","paths","startingplaces","targetplaces","placecolor","strokecolor","strokeopacity","textcolor","visitedcolor","height","width","hidepaths","mapid","usecheckmark","editmode","pulse","hover","showall","showtext","slicemode","showwaygone","placesize","loadJSON","json","fromjson","JSON","parse","Object","assign","this","buildJSON","stringify","getPlacestore","addPlace","linkId","linkedActivity","push","length","addStartingPlace","removePlace","removeStartingPlace","removeTargetPlace","filter","p","e","isStartingPlace","includes","addTargetPlace","isTargetPlace","addPath","pid","fid","sid","strokedasharray","hidepath","removePath","getTouchingPaths","getActivityId","place","setActivityId","getId","setBackgroundDimensions","getPathsWithFid","getPathsWithSid","setHidePaths","value","getHidePaths","setPulse","getPulse","setHover","getHover","setShowall","getShowall","getMapid","getUseCheckmark","setUseCheckmark","getAllActivities","activities","forEach","setStrokeOpacity","getStrokeOpacity","setHideStroke","getHideStroke","getShowText","setShowText","getPlaces","getSliceMode","setSliceMode","getShowWayGone","setShowWayGone","getPlaceSize","setPlaceSize","setPlaceColor","color","getPlaceColor","setVisitedColor","getVisitedColor","setStrokeColor","getStrokeColor"],"mappings":"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"}