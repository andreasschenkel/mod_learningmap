{"version":3,"file":"learningmap.min.js","sources":["../src/learningmap.js"],"sourcesContent":["import {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport placestore from 'mod_learningmap/placestore';\n\n// Constants for updatePathDeclaration.\nconst targetPoints = {\n    firstPoint: 1,\n    secondPoint: 2,\n    bezierPoint: 3,\n};\n\nconst pathTypes = {\n    line: 1,\n    quadraticbezier: 2,\n};\n\nexport const init = () => {\n    // Load the needed template on startup for better execution speed.\n    Templates.prefetchTemplates(['mod_learningmap/cssskeleton']);\n\n    // Size for the new circles. This will be overriden by placesize from the placestore.\n    var circleRadius = 10;\n\n    // Variable for storing the mouse offset\n    var offset;\n\n    // Variable for draggable element\n    var dragel;\n\n    // Variables for storing the paths that need update of the first or\n    // the second coordinates.\n    var pathsToUpdateFirstPoint, pathsToUpdateSecondPoint;\n\n    // Variables for handling the currently selected elements\n    var selectedElement = null,\n        firstPlace = null,\n        secondPlace = null,\n        lastTarget = null;\n\n    // Variable for storing the selected element for the activity selector\n    var elementForActivitySelector = null;\n\n    // Variables for simulating double click on touch devices, set when the\n    // corresponding events are handled\n    var touchstart = false;\n    var touchend = false;\n    // Counter for touchmove events\n    var touchmove = 0;\n\n    // DOM nodes for the editor\n    let mapdiv = document.getElementById('learningmap-editor-map');\n    let code = document.getElementById('id_svgcode');\n\n    // DOM nodes for the activity selector\n    let activitySetting = document.getElementById('learningmap-activity-setting');\n    let activitySelector = document.getElementById('learningmap-activity-selector');\n    let activityStarting = document.getElementById('learningmap-activity-starting');\n    let activityTarget = document.getElementById('learningmap-activity-target');\n    let activityHiddenWarning = document.getElementById('learningmap-activity-hidden-warning');\n\n    // Hide tree view as there is no preview file we can attach to\n    let treeView = document.querySelector('.fp-viewbar .fp-vb-tree');\n    if (treeView) {\n        treeView.setAttribute('style', 'display: none;');\n    }\n\n    // Trigger click event on icon view to ensure that tree view is not active.\n    let iconView = document.querySelector('.fp-viewbar .fp-vb-icons');\n    if (iconView) {\n        // Handle possible delay in form loading.\n        setTimeout(() => {\n            iconView.dispatchEvent(new Event('click'));\n        }, 1000);\n    }\n\n    // Attach listeners to the activity selector\n    if (activitySelector) {\n        // Show places that are not linked to an activity\n        activitySelector.addEventListener('change', function() {\n            placestore.setActivityId(elementForActivitySelector, activitySelector.value);\n            if (activitySelector.value) {\n                let text = document.getElementById('text' + elementForActivitySelector);\n                if (text) {\n                    text.textContent = activitySelector.querySelector('option[value=\"' + activitySelector.value + '\"]').textContent;\n                }\n                let title = document.getElementById('title' + elementForActivitySelector);\n                if (title) {\n                    title.textContent =\n                        activitySelector.querySelector('option[value=\"' + activitySelector.value + '\"]').textContent;\n                }\n                document.getElementById(elementForActivitySelector).classList.remove('learningmap-emptyplace');\n            } else {\n                document.getElementById(elementForActivitySelector).classList.add('learningmap-emptyplace');\n            }\n            updateActivities();\n            updateCode();\n        });\n        // Add / remove a place to the starting places array\n        activityStarting.addEventListener('change', function() {\n            if (activityStarting.checked) {\n                placestore.addStartingPlace(elementForActivitySelector);\n            } else {\n                placestore.removeStartingPlace(elementForActivitySelector);\n            }\n            updateCode();\n        });\n        // Add / remove a place to the target places array\n        activityTarget.addEventListener('change', function() {\n            if (activityTarget.checked) {\n                placestore.addTargetPlace(elementForActivitySelector);\n                document.getElementById(elementForActivitySelector).classList.add('learningmap-targetplace');\n            } else {\n                placestore.removeTargetPlace(elementForActivitySelector);\n                document.getElementById(elementForActivitySelector).classList.remove('learningmap-targetplace');\n            }\n            updateCode();\n        });\n    }\n\n    // Load placestore values from the hidden input field\n    let placestoreInput = document.getElementsByName('placestore')[0];\n    if (placestoreInput) {\n        placestore.loadJSON(placestoreInput.value);\n    }\n\n    updateColorPickers();\n\n    // Mark all activities in the placestore as \"used\".\n    updateActivities();\n\n    // Inititalize the menus.\n    initMenu('advanced-settings', [\n        {name: 'hidepaths', get: placestore.getHidePaths, set: placestore.setHidePaths},\n        {name: 'showall', get: placestore.getShowall, set: placestore.setShowall},\n        {name: 'slicemode', get: placestore.getSliceMode, set: placestore.setSliceMode},\n        {name: 'showwaygone', get: placestore.getShowWayGone, set: placestore.setShowWayGone},\n    ]);\n\n    initMenu('place-settings', [\n        {name: 'usecheckmark', get: placestore.getUseCheckmark, set: placestore.setUseCheckmark},\n        {name: 'hover', get: placestore.getHover, set: placestore.setHover},\n        {name: 'pulse', get: placestore.getPulse, set: placestore.setPulse},\n        {name: 'hidestroke', get: placestore.getHideStroke, set: placestore.setHideStroke},\n        {name: 'showtext', get: placestore.getShowText, set: placestore.setShowText, callback: fixPlaceLabels},\n        {name: 'placesize', get: placestore.getPlaceSize, set: placestore.setPlaceSize, callback: updatePlaceSize},\n        {name: 'placecolor', get: placestore.getPlaceColor, set: placestore.setPlaceColor},\n        {name: 'visitedcolor', get: placestore.getVisitedColor, set: placestore.setVisitedColor},\n        {name: 'strokecolor', get: placestore.getStrokeColor, set: placestore.setStrokeColor},\n    ]);\n\n    // Get SVG code from the (hidden) textarea field\n    if (code && mapdiv) {\n        mapdiv.innerHTML = code.value;\n    }\n    // Reload background image to get the correct width and height values\n    refreshBackgroundImage();\n    registerBackgroundListener();\n    updateCode();\n\n    // Enable dragging of places\n    let svg = document.getElementById('learningmap-svgmap-' + placestore.getMapid());\n    makeDraggable(svg);\n\n    // Refresh stylesheet values from placestore\n    updateCSS();\n\n    // Add listeners for clicking and context menu\n    if (mapdiv) {\n        mapdiv.addEventListener('dblclick', dblclickHandler);\n        mapdiv.addEventListener('click', clickHandler);\n\n        mapdiv.addEventListener('contextmenu', function(e) {\n            e.preventDefault();\n            showContextMenu(e);\n        }, false);\n    }\n    /**\n     * Shows the context menu at the current mouse position\n     * @param {*} e\n     */\n    function showContextMenu(e) {\n        unselectAll();\n        hideOtherMenus();\n        // Check for the existence of the target (could have vanished since the event started).\n        if (activitySetting && document.getElementById(e.target.id) !== null) {\n            if (e.touches) {\n                e = e.touches[0];\n            }\n            if (e.target.classList.contains('learningmap-place')) {\n                e.target.classList.add('learningmap-selected-activity-selector');\n                let activityId = placestore.getActivityId(e.target.id);\n                let scalingFactor = mapdiv.clientWidth / 800;\n                activitySetting.style.setProperty('--pos-x', e.target.cx.baseVal.value * scalingFactor + 'px');\n                activitySetting.style.setProperty('--pos-y', e.target.cy.baseVal.value * scalingFactor + 'px');\n                activitySetting.style.setProperty('--map-width', mapdiv.clientWidth + 'px');\n                activitySetting.style.setProperty('--map-height', mapdiv.clientHeight + 'px');\n                activitySetting.style.display = 'block';\n                document.getElementById('learningmap-activity-selector').value = activityId;\n                document.getElementById('learningmap-activity-starting').checked = placestore.isStartingPlace(e.target.id);\n                document.getElementById('learningmap-activity-target').checked = placestore.isTargetPlace(e.target.id);\n                elementForActivitySelector = e.target.id;\n                updateActivities();\n            } else {\n                hideContextMenu();\n                hideOtherMenus();\n            }\n        }\n    }\n\n    /**\n     * Hides the context menu\n     */\n    function hideContextMenu() {\n        let e = document.getElementById(elementForActivitySelector);\n        if (e) {\n            e.classList.remove('learningmap-selected-activity-selector');\n        }\n        activitySetting.style.display = 'none';\n    }\n\n    let backgroundfileNode = document.getElementById('id_backgroundfile_fieldset');\n    if (backgroundfileNode) {\n        let observer = new MutationObserver(refreshBackgroundImage);\n        observer.observe(backgroundfileNode, {attributes: true, childList: true, subtree: true});\n    }\n\n    /**\n     * Helper function for getting the right coordinates from the mouse\n     * @param {*} evt\n     * @returns {object}\n     */\n    function getMousePosition(evt) {\n        if (evt.touches) {\n            evt = evt.touches[0];\n        }\n        return transformCoordinates(evt.clientX, evt.clientY);\n    }\n\n    /**\n     * Transforms client coordinates to SVG coordinates\n     * @param {number} x x coordinate to transform\n     * @param {number} y y coordinate to transform\n     * @returns {object} Object containing transformed x and y coordinate\n     */\n    function transformCoordinates(x, y) {\n        var CTM = dragel.getScreenCTM();\n        return {\n            x: (x - CTM.e) / CTM.a,\n            y: (y - CTM.f) / CTM.d\n        };\n    }\n\n    /**\n     * Enables dragging on an DOM node\n     * @param {*} el\n     */\n    function makeDraggable(el) {\n        dragel = el;\n        if (el) {\n            el.addEventListener('mousedown', startDrag);\n            el.addEventListener('mousemove', drag);\n            el.addEventListener('mouseup', endDrag);\n            el.addEventListener('mouseleave', endDrag);\n            el.addEventListener('touchstart', startTouch);\n            el.addEventListener('touchmove', drag);\n            el.addEventListener('touchend', endTouch);\n            el.addEventListener('touchleave', endTouch);\n            el.addEventListener('touchcancel', endTouch);\n        }\n\n        /**\n         * Function called whenn dragging starts.\n         * @param {*} evt\n         */\n        function startDrag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            pathsToUpdateFirstPoint = [];\n            pathsToUpdateSecondPoint = [];\n            if (evt.target.classList.contains('learningmap-draggable')) {\n                selectedElement = evt.target;\n                offset = getMousePosition(evt);\n                offset.x -= parseInt(selectedElement.getAttributeNS(null, \"cx\"));\n                offset.y -= parseInt(selectedElement.getAttributeNS(null, \"cy\"));\n                // Get paths that need to be updated.\n                pathsToUpdateFirstPoint = placestore.getPathsWithFid(selectedElement.id);\n                pathsToUpdateSecondPoint = placestore.getPathsWithSid(selectedElement.id);\n            } else if (evt.target.nodeName == 'text') {\n                selectedElement = evt.target;\n                let place = selectedElement.parentNode.querySelector('.learningmap-place');\n                offset = getMousePosition(evt);\n                offset.x -= parseInt(selectedElement.getAttributeNS(null, \"dx\")) + place.cx.baseVal.value;\n                offset.y -= parseInt(selectedElement.getAttributeNS(null, \"dy\")) + place.cy.baseVal.value;\n            } else if (evt.target.nodeName == 'path') {\n                selectedElement = evt.target;\n                offset = getMousePosition(evt);\n                let pathPoint = transformCoordinates(evt.layerX, evt.layerY);\n                offset.x += pathPoint.x;\n                offset.y += pathPoint.y;\n            }\n        }\n\n        /**\n         * Function called during dragging. Continuously updates circles center coordinates and the\n         * coordinates of the touching paths.\n         * @param {*} evt\n         */\n        function drag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            // Count touchmove events\n            touchmove++;\n            if (selectedElement) {\n                var coord = getMousePosition(evt);\n                let cx = coord.x - offset.x;\n                let cy = coord.y - offset.y;\n                if (selectedElement.nodeName == 'text') {\n                    let place = selectedElement.parentNode.querySelector('.learningmap-place');\n                    // Calculate the delta from the current mouse position to the corresponding place.\n                    // coord: current mouse position\n                    // offset: delta from the mouse position to the coordinates of the text node\n                    let dx = coord.x - offset.x - place.cx.baseVal.value;\n                    let dy = coord.y - offset.y - place.cy.baseVal.value;\n                    selectedElement.setAttributeNS(null, \"dx\", dx);\n                    selectedElement.setAttributeNS(null, \"dy\", dy);\n                }\n                if (selectedElement.nodeName == 'path') {\n                    selectedElement.setAttribute(\n                        'd',\n                        updatePathDeclaration(selectedElement.getAttribute('d'), coord.x, coord.y, targetPoints.bezierPoint)\n                    );\n                }\n                if (selectedElement.nodeName == 'circle') {\n                    selectedElement.setAttributeNS(null, \"cx\", cx);\n                    selectedElement.setAttributeNS(null, \"cy\", cy);\n                    let textNode = document.getElementById('text' + selectedElement.id);\n                    if (textNode !== null) {\n                        textNode.setAttributeNS(null, 'x', cx);\n                        textNode.setAttributeNS(null, 'y', cy);\n                    }\n                    pathsToUpdateFirstPoint.forEach(function(path) {\n                        let pathNode = document.getElementById(path.id);\n                        if (pathNode !== null) {\n                            if (pathNode.nodeName == 'path') {\n                                pathNode.setAttribute(\n                                    'd',\n                                    updatePathDeclaration(pathNode.getAttribute('d'), cx, cy, targetPoints.firstPoint)\n                                );\n                            } else {\n                                pathNode.setAttribute('x1', cx);\n                                pathNode.setAttribute('y1', cy);\n                            }\n                        }\n                    });\n\n                    pathsToUpdateSecondPoint.forEach(function(path) {\n                        let pathNode = document.getElementById(path.id);\n                        if (pathNode !== null) {\n                            if (pathNode.nodeName == 'path') {\n                                pathNode.setAttribute(\n                                    'd',\n                                    updatePathDeclaration(pathNode.getAttribute('d'), cx, cy, targetPoints.secondPoint)\n                                );\n                            } else {\n                                pathNode.setAttribute('x2', cx);\n                                pathNode.setAttribute('y2', cy);\n                            }\n                        }\n                    });\n                }\n            }\n        }\n\n        /**\n         * Function called when dragging ends.\n         * @param {*} evt\n         */\n        function endDrag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            selectedElement = null;\n            unselectAll();\n            updateCode();\n        }\n\n        /**\n         * Function called when touchstart event occurs.\n         * @param {*} evt\n         */\n        function startTouch(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            if (\n                evt.target.classList.contains('learningmap-draggable') ||\n                evt.target.nodeName == 'text' ||\n                evt.target.nodeName == 'path'\n            ) {\n                if (!touchstart) {\n                    touchstart = true;\n                    touchmove = 0;\n                    touchend = false;\n                    setTimeout(\n                        (evt) => {\n                            if (touchmove < 3 && !touchend) {\n                                if (evt.touches) {\n                                    evt = evt.touches[0];\n                                }\n                                showContextMenu(evt);\n                            }\n                        },\n                        2000,\n                        evt\n                    );\n                    setTimeout(\n                        () => {\n                            touchstart = false;\n                        },\n                    300);\n                } else {\n                    dblclickHandler(evt);\n                    touchstart = false;\n                }\n                startDrag(evt);\n            } else {\n                if (!touchstart) {\n                    touchstart = true;\n                    touchend = false;\n                    touchmove = 0;\n                    setTimeout(\n                        () => {\n                            touchstart = false;\n                        },\n                    300);\n                } else {\n                    dblclickHandler(evt);\n                    touchstart = false;\n                }\n            }\n        }\n\n        /**\n         * Function called when touchend, touchleave or touchcancel event occurs.\n         * @param {*} evt\n         */\n        function endTouch(evt) {\n            selectedElement = null;\n            touchend = true;\n            // If there was only a small move (<3 move events), this also counts as a click.\n            if (touchmove < 3 && touchstart) {\n                clickHandler(evt);\n            } else {\n                endDrag(evt);\n            }\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n        }\n\n        /**\n         * Updates the path declaration of lines and quadratic bezier curves setting one of the points.\n         * @param {string} oldDefinition SVG path definition string\n         * @param {number} targetX x coordinate of the point to set\n         * @param {number} targetY y coordinate of the point to set\n         * @param {number} targetP Which point to change (you can use the targetPoints constants here)\n         * @returns {string} Updated SVG path definition\n         */\n        function updatePathDeclaration(oldDefinition, targetX, targetY, targetP = targetPoints.firstPoint) {\n            let parts = oldDefinition.split(' ');\n            let fromX = 0;\n            let fromY = 0;\n            let toX = 0;\n            let toY = 0;\n            let bezierX = 0;\n            let bezierY = 0;\n            let pathType = pathTypes.line;\n\n            // The d attribute of an SVG path in a learning map can have two different formats (in this version):\n            // \"M x1 y1 L x2 y2\"        Line from x1, y1 to x2, y2\n            // \"M x1 y2 Q x3 y3 x2 y2\"  Quadratic bezier curve inside the triangle defined by x1, y1, x2, y2 and x3, y3.\n            for (let i = 0; i < parts.length; i++) {\n                // Every path contains the first point in that way.\n                if (parts[i] == 'M') {\n                    fromX = parseInt(parts[i + 1]);\n                    fromY = parseInt(parts[i + 2]);\n                    i += 2;\n                }\n                // This path is a direct line, so there are only two points in total.\n                if (parts[i] == 'L') {\n                    toX = parseInt(parts[i + 1]);\n                    toY = parseInt(parts[i + 2]);\n                    i += 2;\n                }\n                // This path is a bezier curve, there are three points in total.\n                if (parts[i] == 'Q') {\n                    bezierX = parseInt(parts[i + 1]);\n                    bezierY = parseInt(parts[i + 2]);\n                    toX = parseInt(parts[i + 3]);\n                    toY = parseInt(parts[i + 4]);\n                    i += 4;\n                    pathType = pathTypes.quadraticbezier;\n                }\n            }\n\n            switch (targetP) {\n                case targetPoints.firstPoint:\n                    fromX = targetX;\n                    fromY = targetY;\n                    break;\n                case targetPoints.secondPoint:\n                    toX = targetX;\n                    toY = targetY;\n                    break;\n                case targetPoints.bezierPoint:\n                    // Calculate the third triangle point for the bezier curve.\n                    bezierX = targetX * 2 - (fromX + toX) * 0.5;\n                    bezierY = targetY * 2 - (fromY + toY) * 0.5;\n                    pathType = pathTypes.quadraticbezier;\n                    break;\n            }\n\n            if (pathType == pathTypes.quadraticbezier) {\n                return 'M ' + fromX + ' ' + fromY + ' Q ' + bezierX + ' ' + bezierY + ', ' + toX + ' ' + toY;\n            } else {\n                return 'M ' + fromX + ' ' + fromY + ' L ' + toX + ' ' + toY;\n            }\n        }\n    }\n\n    /**\n     * Updates the form fields for the SVG code and the placestore from the editor.\n     */\n    function updateCode() {\n        if (code && mapdiv) {\n            code.innerHTML = mapdiv.innerHTML;\n        }\n        if (placestoreInput) {\n            document.getElementsByName('placestore')[0].value = JSON.stringify(placestore.getPlacestore());\n        }\n    }\n\n    /**\n     * Handles double clicks on the map\n     * @param {*} event\n     */\n    function dblclickHandler(event) {\n        hideContextMenu();\n        hideOtherMenus();\n        unselectAll();\n        if (event.target.classList.contains('learningmap-mapcontainer') ||\n            event.target.classList.contains('learningmap-background-image')) {\n            addPlace(event);\n        } else if (event.target.classList.contains('learningmap-place')) {\n            if (lastTarget == event.target.id) {\n                lastTarget = null;\n                clickHandler(event);\n            } else {\n                removePlace(event);\n            }\n        } else if (event.target.classList.contains('learningmap-path')) {\n            removePath(event.target.id);\n        }\n        updateCode();\n    }\n\n    /**\n     * Returns an empty title tag with the given id.\n     * @param {*} id id for the title\n     * @returns {any}\n     */\n    function title(id) {\n        let title = document.createElementNS('http://www.w3.org/2000/svg', 'title');\n        title.setAttribute('id', id);\n        return title;\n    }\n\n    /**\n     * Returns an text tag with the given id.\n     * @param {*} id id for the text\n     * @param {*} content content of the tag\n     * @param {*} x x coordinate of the text\n     * @param {*} y y coordinate of the text\n     * @returns {any}\n     */\n     function text(id, content, x, y) {\n        let text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        text.setAttribute('id', id);\n        text.setAttribute('x', x);\n        text.setAttribute('y', y);\n        // Default value for delta: Circle radius * 1.5 (as a padding)\n        text.setAttribute('dx', circleRadius * 1.5);\n        text.setAttribute('dy', circleRadius * 1.5);\n        text.textContent = content;\n        return text;\n    }\n\n    /**\n     * Returns a circle tag with the given dimensions.\n     * @param {*} x x coordinate of the center\n     * @param {*} y y coordinate of the center\n     * @param {*} r radius\n     * @param {*} classes classes to add\n     * @param {*} id id of the circle\n     * @returns {any}\n     */\n    function circle(x, y, r, classes, id) {\n        let circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n        circle.setAttribute('class', classes);\n        circle.setAttribute('id', id);\n        circle.setAttribute('cx', x);\n        circle.setAttribute('cy', y);\n        circle.setAttribute('r', r);\n        return circle;\n    }\n\n    /**\n     * Returns a path between two points.\n     * @param {*} x1 x coordinate of the first point\n     * @param {*} y1 y coordinate of the first point\n     * @param {*} x2 x coordinate of the second point\n     * @param {*} y2 y coordinate of the second point\n     * @param {*} classes CSS classes to set\n     * @param {*} id id of the path\n     * @returns {any}\n     */\n     function path(x1, y1, x2, y2, classes, id) {\n        let path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        path.setAttribute('class', classes);\n        path.setAttribute('id', id);\n        path.setAttribute('d', 'M ' + x1 + ' ' + y1 + ' L ' + x2 + ' ' + y2);\n        return path;\n    }\n\n    /**\n     * Returns a link around a given child element. This function also adds a title element next\n     * to the child for accessibility.\n     * @param {*} child child item to set the link on\n     * @param {*} id id of the link\n     * @param {*} title title of the link\n     * @param {*} text text to describe the link\n     * @returns {any}\n     */\n    function link(child, id, title = null, text = null) {\n        let link = document.createElementNS('http://www.w3.org/2000/svg', 'a');\n        link.setAttribute('id', id);\n        link.setAttribute('xlink:href', '');\n        link.appendChild(child);\n        if (title !== null) {\n            link.appendChild(title);\n        }\n        if (text !== null) {\n            link.appendChild(text);\n        }\n        return link;\n    }\n\n    /**\n     * Adds a place on the SVG map. This function also prepares the code for linking activities\n     * and adding titles (for accessibility).\n     * @param {*} event event causing the command\n     */\n    function addPlace(event) {\n        let placesgroup = document.getElementById('placesGroup');\n        let placeId = 'p' + placestore.getId();\n        let linkId = 'a' + placestore.getId();\n        var CTM = event.target.getScreenCTM();\n        if (event.touches) {\n            event = event.touches[0];\n        }\n        let cx = (event.clientX - CTM.e) / CTM.a;\n        let cy = (event.clientY - CTM.f) / CTM.d;\n        placesgroup.appendChild(\n            link(\n                circle(cx, cy, circleRadius, 'learningmap-place learningmap-draggable learningmap-emptyplace', placeId),\n                linkId,\n                title('title' + placeId),\n                text('text' + placeId, '', cx, cy)\n            )\n        );\n        placestore.addPlace(placeId, linkId);\n    }\n\n    /**\n     * Handles single clicks on the background image.\n     * @param {*} event click event\n     * @returns {void}\n     */\n    function clickHandler(event) {\n        event.preventDefault();\n        hideContextMenu();\n        hideOtherMenus();\n        if (event.target.classList.contains('learningmap-place') && selectedElement === null) {\n            if (firstPlace === null) {\n                firstPlace = event.target.id;\n                document.getElementById(firstPlace).classList.add('learningmap-selected');\n            } else {\n                secondPlace = event.target.id;\n                let fid = parseInt(firstPlace.replace('p', ''));\n                let sid = parseInt(secondPlace.replace('p', ''));\n                if (sid == fid) {\n                    return;\n                }\n                if (sid < fid) {\n                    let z = sid;\n                    sid = fid;\n                    fid = z;\n                }\n                addPath(fid, sid);\n                let first = document.getElementById(firstPlace);\n                if (first) {\n                    first.classList.remove('learningmap-selected');\n                }\n                firstPlace = null;\n                lastTarget = secondPlace;\n                secondPlace = null;\n            }\n        } else {\n            unselectAll();\n            firstPlace = null;\n        }\n    }\n    /**\n     * Removes the classes 'learningmap-selected' and 'learningmap-selectet-activity-selector'\n     * from all nodes\n     */\n    function unselectAll() {\n        Array.from(document.getElementsByClassName('learningmap-selected')).forEach(function(e) {\n            e.classList.remove('learningmap-selected');\n        });\n        Array.from(document.getElementsByClassName('learningmap-selected-activity-selector')).forEach(function(e) {\n            e.classList.remove('learningmap-selected-activity-selector');\n        });\n    }\n\n    /**\n     * Adds a path between two places.\n     * @param {number} fid id of the first place (meant to be the smaller one)\n     * @param {number} sid id of the second place (meant to be the bigger one)\n     */\n    function addPath(fid, sid) {\n        let pid = 'p' + fid + '_' + sid;\n        if (document.getElementById(pid) === null) {\n            let pathsgroup = document.getElementById('pathsGroup');\n            let first = document.getElementById('p' + fid);\n            let second = document.getElementById('p' + sid);\n            if (pathsgroup && first && second) {\n                pathsgroup.appendChild(\n                    path(\n                        first.cx.baseVal.value,\n                        first.cy.baseVal.value,\n                        second.cx.baseVal.value,\n                        second.cy.baseVal.value,\n                        'learningmap-path',\n                        pid\n                    )\n                );\n                placestore.addPath(pid, 'p' + fid, 'p' + sid);\n            }\n        }\n    }\n\n    /**\n     * Removes a place from the SVG and the placestore. This function also removes all\n     * touching paths and entries in statringplaces / targetplaces linking to the removed\n     * place.\n     * @param {any} event event causing the remove order\n     */\n    function removePlace(event) {\n        let place = document.getElementById(event.target.id);\n        let parent = place.parentNode;\n        removePathsTouchingPlace(event.target.id);\n        placestore.removePlace(event.target.id);\n        parent.removeChild(place);\n        parent.parentNode.removeChild(parent);\n\n        updateCode();\n    }\n\n    /**\n     * Removes all paths touching a certain place\n     * @param {number} id id of the place\n     */\n    function removePathsTouchingPlace(id) {\n        placestore.getTouchingPaths(id).forEach(\n            function(e) {\n                removePath(e.id);\n            }\n        );\n    }\n\n    /**\n     * Removes a path from the SVG and from the placestore\n     * @param {number} id id of the path\n     */\n    function removePath(id) {\n        let path = document.getElementById(id);\n        if (path !== null) {\n            path.parentNode.removeChild(path);\n            placestore.removePath(id);\n        }\n    }\n\n    /**\n     * Sets the background image of the SVG to the current image in filemanager.\n     */\n    function refreshBackgroundImage() {\n        let previewimage = document.getElementsByClassName('realpreview');\n        if (previewimage.length > 0) {\n            let background = document.getElementById('learningmap-background-image');\n            let backgroundurl = previewimage[0].getAttribute('src').split('?')[0];\n            // If the uploaded file reuses the filename of a previously uploaded image, they differ\n            // only in the oid. So one has to append the oid to the url.\n            if (previewimage[0].getAttribute('src').split('?')[1].includes('&oid=')) {\n                backgroundurl += '?oid=' + previewimage[0].getAttribute('src').split('&oid=')[1];\n            }\n            background.setAttribute('xlink:href', backgroundurl);\n        }\n    }\n\n    /**\n     * Adds an eventListener to the background image for watching file changes and updating\n     * height and width of the image.\n     */\n    function registerBackgroundListener() {\n        let background = document.getElementById('learningmap-background-image');\n        if (background) {\n            background.addEventListener('load', function() {\n                background.removeAttribute('height');\n                let height = parseInt(background.getBBox().height);\n                let width = background.getBBox().width;\n                placestore.setBackgroundDimensions(width, height);\n                svg.setAttribute('viewBox', '0 0 ' + placestore.width + ' ' + placestore.height);\n                background.setAttribute('width', width);\n                background.setAttribute('height', height);\n                updateCode();\n            });\n        }\n    }\n\n    /**\n     * Updates CSS code inside the SVG (called, when one of the colors is changed).\n     * Calls updateCode() when completed.\n     */\n    function updateCSS() {\n        Templates.renderForPromise('mod_learningmap/cssskeleton', placestore.getPlacestore())\n            .then(({html, js}) => {\n                Templates.replaceNode('#learningmap-svgstyle', html, js);\n                updateCode();\n                return true;\n            })\n            .catch(ex => displayException(ex));\n        let placestoretemp = placestore.getPlacestore();\n        placestoretemp.mapid = 'preview';\n        placestoretemp.cssid = 'learningmap-preview-svgstyle';\n        placestoretemp.editmode = false;\n        Templates.renderForPromise('mod_learningmap/cssskeleton', placestoretemp)\n            .then(({html, js}) => {\n                Templates.replaceNode('#learningmap-preview-svgstyle', html, js);\n                return true;\n            })\n            .catch(ex => displayException(ex));\n    }\n\n    /**\n     * Updates the activity selector to highlight the activities already used\n     * and to show the alert for hidden activities.\n     */\n    function updateActivities() {\n        let activities = placestore.getAllActivities();\n        let options = Array.from(activitySelector.getElementsByTagName('option'));\n        activityHiddenWarning.setAttribute('hidden', '');\n        options.forEach(function(n) {\n            if (activities.includes(n.value)) {\n                n.classList.add('learningmap-used-activity');\n                if (n.selected) {\n                    if (n.getAttribute('data-activity-hidden') == true) {\n                        activityHiddenWarning.removeAttribute('hidden');\n                    }\n                }\n            } else {\n                n.classList.remove('learningmap-used-activity');\n            }\n        });\n    }\n\n    /**\n     * Adds missing text nodes\n     */\n    function fixPlaceLabels() {\n        let options = Array.from(activitySelector.getElementsByTagName('option'));\n        let places = placestore.getPlaces();\n        for (const place of places) {\n            if (document.getElementById('text' + place.id) === null) {\n                let content = '';\n                for (const option of options) {\n                    if (option.value == place.linkedActivity) {\n                        content = option.textContent;\n                        break;\n                    }\n                }\n                let placeNode = document.getElementById(place.id);\n                let textNode = text('text' + place.id, content, placeNode.cx.baseVal.value, placeNode.cy.baseVal.value);\n                placeNode.parentNode.appendChild(textNode);\n            }\n        }\n    }\n\n    /**\n     * Updates the size of the places.\n     */\n    function updatePlaceSize() {\n        circleRadius = placestore.getPlaceSize();\n        let places = placestore.getPlaces();\n        for (const place of places) {\n            let placeNode = document.getElementById(place.id);\n            if (placeNode) {\n                placeNode.setAttribute('r', circleRadius);\n            }\n        }\n    }\n\n    /**\n     * Initializes a menu with the given features.\n     * @param {*} name Name of the menu\n     * @param {*} features Array with features to add to the menu\n     */\n    function initMenu(name, features) {\n        let icon = document.getElementById('learningmap-' + name + '-icon');\n        if (icon) {\n            icon.addEventListener('click', function() {\n                if (menuIsHidden(name)) {\n                    showMenu(name);\n                } else {\n                    hideMenu(name);\n                }\n            });\n            let close = document.getElementById('learningmap-' + name + '-close');\n            if (close) {\n                close.addEventListener('click', function() {\n                    hideMenu(name);\n                });\n            }\n        }\n        features.forEach(function(feature) {\n            menuItemLogic(name, feature.name, feature.get, feature.set, feature.callback, feature.second);\n        });\n    }\n\n    /**\n     * Returns whether the menu is hidden or not.\n     * @param {*} name Name of the menu\n     * @returns {boolean}\n     */\n    function menuIsHidden(name) {\n        let menu = document.getElementById('learningmap-' + name + '-menu');\n        if (menu) {\n            return menu.getAttribute('hidden') !== null;\n        }\n        return false;\n    }\n\n    /**\n     * Hides the menu with the given name.\n     * @param {*} name Name of the menu\n     */\n    function hideMenu(name) {\n        let menu = document.getElementById('learningmap-' + name + '-menu');\n        if (menu) {\n            menu.setAttribute('hidden', '');\n        }\n    }\n\n    /**\n     * Hides all menus except the one with the given name.\n     * @param {*} name Name of the menu not to hide\n     */\n    function hideOtherMenus(name = '') {\n        let otherMenus = document.querySelectorAll('.learningmap-menu');\n        otherMenus.forEach(function(menu) {\n            if (menu.id != 'learningmap-' + name + '-menu') {\n                menu.setAttribute('hidden', '');\n            }\n        });\n    }\n\n    /**\n     * Shows the menu with the given name.\n     * @param {*} name Name of the menu\n     */\n    function showMenu(name) {\n        let menu = document.getElementById('learningmap-' + name + '-menu');\n        if (menu) {\n            menu.removeAttribute('hidden');\n            updateColorPickers();\n            hideOtherMenus(name);\n            hideContextMenu();\n        }\n    }\n\n    /**\n     * Adds the event listener to menu items\n     * @param {*} type Type of the item (describes the menu where it is located, e.g. advanced-settings, place-settings, ...)\n     * @param {*} name Name of the item\n     * @param {*} getCall Method of placestore to call to read value\n     * @param {*} setCall Method of placestore to call to save value\n     * @param {*} callback Additional callback after value is saved\n     */\n    function menuItemLogic(type, name, getCall, setCall, callback = null) {\n        let menuItem = document.getElementById('learningmap-' + type + '-' + name);\n        if (menuItem) {\n            switch (menuItem.attributes.type.nodeValue) {\n                case 'checkbox':\n                    menuItem.checked = getCall.call(placestore);\n                    menuItem.addEventListener('input', function() {\n                        setCall.call(placestore, menuItem.checked);\n                        if (callback !== null) {\n                            callback();\n                        }\n                        updateCSS();\n                    });\n                break;\n                default:\n                    menuItem.value = getCall.call(placestore);\n                    menuItem.addEventListener('input', function() {\n                        setCall.call(placestore, menuItem.value);\n                        if (callback !== null) {\n                            callback();\n                        }\n                        updateCSS();\n                    });\n            }\n\n        }\n    }\n\n    /**\n     * Updates the color pickers to the current values from the placestore.\n     */\n    function updateColorPickers() {\n        let colorPickers = document.querySelectorAll('[id^=\"learningmap-place-settings-jscolor-\"]');\n        colorPickers.forEach(function(colorpicker) {\n            if (colorpicker.jscolor) {\n                colorpicker.jscolor.fromString(placestore[colorpicker.id.split('jscolor-')[1]]);\n            }\n        });\n    }\n};\n"],"names":["targetPoints","pathTypes","prefetchTemplates","offset","dragel","pathsToUpdateFirstPoint","pathsToUpdateSecondPoint","circleRadius","selectedElement","firstPlace","secondPlace","lastTarget","elementForActivitySelector","touchstart","touchend","touchmove","mapdiv","document","getElementById","code","activitySetting","activitySelector","activityStarting","activityTarget","activityHiddenWarning","treeView","querySelector","setAttribute","iconView","setTimeout","dispatchEvent","Event","addEventListener","setActivityId","value","text","textContent","title","classList","remove","add","updateActivities","updateCode","checked","addStartingPlace","removeStartingPlace","addTargetPlace","removeTargetPlace","placestoreInput","getElementsByName","loadJSON","updateColorPickers","initMenu","name","get","placestore","getHidePaths","set","setHidePaths","getShowall","setShowall","getSliceMode","setSliceMode","getShowWayGone","setShowWayGone","getUseCheckmark","setUseCheckmark","getHover","setHover","getPulse","setPulse","getHideStroke","setHideStroke","getShowText","setShowText","callback","options","Array","from","getElementsByTagName","places","getPlaces","place","id","content","option","linkedActivity","placeNode","textNode","cx","baseVal","cy","parentNode","appendChild","getPlaceSize","setPlaceSize","getPlaceColor","setPlaceColor","getVisitedColor","setVisitedColor","getStrokeColor","setStrokeColor","innerHTML","refreshBackgroundImage","background","removeAttribute","height","parseInt","getBBox","width","setBackgroundDimensions","svg","registerBackgroundListener","getMapid","showContextMenu","e","unselectAll","hideOtherMenus","target","touches","contains","activityId","getActivityId","scalingFactor","clientWidth","style","setProperty","clientHeight","display","isStartingPlace","isTargetPlace","hideContextMenu","el","startDrag","drag","endDrag","evt","cancelable","preventDefault","nodeName","dblclickHandler","endTouch","getMousePosition","x","getAttributeNS","y","getPathsWithFid","getPathsWithSid","pathPoint","transformCoordinates","layerX","layerY","coord","dx","dy","setAttributeNS","updatePathDeclaration","getAttribute","forEach","path","pathNode","clickHandler","oldDefinition","targetX","targetY","targetP","parts","split","fromX","fromY","toX","toY","bezierX","bezierY","pathType","i","length","makeDraggable","updateCSS","backgroundfileNode","MutationObserver","observe","attributes","childList","subtree","clientX","clientY","CTM","getScreenCTM","a","f","d","JSON","stringify","getPlacestore","event","placesgroup","placeId","getId","linkId","child","link","createElementNS","r","classes","circle","addPlace","parent","getTouchingPaths","removePath","removePlace","removeChild","fid","replace","sid","z","pid","pathsgroup","first","second","x1","y1","x2","y2","addPath","getElementsByClassName","previewimage","backgroundurl","includes","renderForPromise","then","_ref","html","js","replaceNode","catch","ex","placestoretemp","mapid","cssid","editmode","_ref2","activities","getAllActivities","n","selected","features","icon","menu","menuIsHidden","hideMenu","showMenu","close","feature","type","getCall","setCall","menuItem","nodeValue","call","menuItemLogic","otherMenus","querySelectorAll","colorpicker","jscolor","fromString"],"mappings":"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"}