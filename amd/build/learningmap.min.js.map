{"version":3,"file":"learningmap.min.js","sources":["../src/learningmap.js"],"sourcesContent":["import {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport placestore from 'mod_learningmap/placestore';\n\nexport const init = () => {\n    // Load the needed template on startup for better execution speed.\n    Templates.prefetchTemplates(['mod_learningmap/cssskeleton']);\n\n    // Variable for storing the mouse offset\n    var offset;\n\n    // Variable for draggable element\n    var dragel;\n\n    // Variables for storing the paths that need update of the first or\n    // the second coordinates.\n    var pathsToUpdateFirstPoint, pathsToUpdateSecondPoint;\n\n    // Variables for handling the currently selected elements\n    var selectedElement = null,\n        firstPlace = null,\n        secondPlace = null,\n        lastTarget = null;\n\n    // Variable for storing the selected element for the activity selector\n    var elementForActivitySelector = null;\n\n    // Variables for simulating double click on touch devices, set when the\n    // corresponding events are handled\n    var touchstart = false;\n    var touchend = false;\n    // Counter for touchmove events\n    var touchmove = 0;\n\n    // DOM nodes for the editor\n    let mapdiv = document.getElementById('learningmap-editor-map');\n    let code = document.getElementById('id_introeditor_text');\n    let colorChooserPlace = document.getElementById('learningmap-color-place');\n    let colorChooserVisited = document.getElementById('learningmap-color-visited');\n    let colorChooserPath = document.getElementById('learningmap-color-path');\n\n    // DOM nodes for the activity selector\n    let activitySetting = document.getElementById('learningmap-activity-setting');\n    let activitySelector = document.getElementById('learningmap-activity-selector');\n    let activityStarting = document.getElementById('learningmap-activity-starting');\n    let activityTarget = document.getElementById('learningmap-activity-target');\n    let activityHiddenWarning = document.getElementById('learningmap-activity-hidden-warning');\n    let advancedSettingsIcon = document.getElementById('learningmap-advanced-settings-icon');\n\n    // Hide tree view as there is no preview file we can attach to\n    let treeView = document.querySelector('.fp-viewbar .fp-vb-tree');\n    if (treeView) {\n        treeView.setAttribute('style', 'display: none;');\n    }\n\n    // Trigger click event on icon view to ensure that tree view is not active.\n    let iconView = document.querySelector('.fp-viewbar .fp-vb-icons');\n    if (iconView) {\n        // Handle possible delay in form loading.\n        setTimeout(() => {\n            iconView.dispatchEvent(new Event('click'));\n        }, 1000);\n    }\n\n    // Attach listeners to the activity selector\n    if (activitySelector) {\n        // Show places that are not linked to an activity\n        activitySelector.addEventListener('change', function() {\n            placestore.setActivityId(elementForActivitySelector, activitySelector.value);\n            if (activitySelector.value) {\n                let text = document.getElementById('text' + elementForActivitySelector);\n                if (text) {\n                    text.textContent = activitySelector.querySelector('option[value=\"' + activitySelector.value + '\"]').textContent;\n                }\n                document.getElementById(elementForActivitySelector).classList.remove('learningmap-emptyplace');\n            } else {\n                document.getElementById(elementForActivitySelector).classList.add('learningmap-emptyplace');\n            }\n            updateActivities();\n            updateCode();\n        });\n        // Add / remove a place to the starting places array\n        activityStarting.addEventListener('change', function() {\n            if (activityStarting.checked) {\n                placestore.addStartingPlace(elementForActivitySelector);\n            } else {\n                placestore.removeStartingPlace(elementForActivitySelector);\n            }\n            updateCode();\n        });\n        // Add / remove a place to the target places array\n        activityTarget.addEventListener('change', function() {\n            if (activityTarget.checked) {\n                placestore.addTargetPlace(elementForActivitySelector);\n                document.getElementById(elementForActivitySelector).classList.add('learningmap-targetplace');\n            } else {\n                placestore.removeTargetPlace(elementForActivitySelector);\n                document.getElementById(elementForActivitySelector).classList.remove('learningmap-targetplace');\n            }\n            updateCode();\n        });\n    }\n\n    // Load placestore values from the hidden input field\n    let placestoreInput = document.getElementsByName('placestore')[0];\n    if (placestoreInput) {\n        placestore.loadJSON(placestoreInput.value);\n    }\n\n    // Mark all activities in the placestore as \"used\".\n    updateActivities();\n\n    // Attach listeners to the advanced settings div\n    if (advancedSettingsIcon) {\n        let advancedSettings = document.getElementById('learningmap-advanced-settings');\n        advancedSettingsIcon.addEventListener('click', function() {\n            if (advancedSettings.getAttribute('hidden') === null) {\n                advancedSettings.setAttribute('hidden', '');\n            } else {\n                advancedSettings.removeAttribute('hidden');\n            }\n        });\n        let advancedSettingsClose = document.getElementById('learningmap-advanced-settings-close');\n        if (advancedSettingsClose) {\n            advancedSettingsClose.addEventListener('click', function() {\n                advancedSettings.setAttribute('hidden', '');\n            });\n        }\n\n        let hidepaths = document.getElementById('learningmap-hidepaths');\n        // Attach a listener to the hidepaths checkbox\n        if (hidepaths) {\n            hidepaths.checked = placestore.getHidePaths();\n            hidepaths.addEventListener('change', function() {\n                placestore.setHidePaths(hidepaths.checked);\n                updateCSS();\n            });\n        }\n\n        let hidestroke = document.getElementById('learningmap-hidestroke');\n        // Attach a listener to the hidestrokescheckbox\n        if (hidestroke) {\n            hidestroke.checked = placestore.getStrokeOpacity() < 1;\n            hidestroke.addEventListener('change', function() {\n                placestore.setStrokeOpacity(hidestroke.checked ? 0 : 1);\n                updateCSS();\n            });\n        }\n\n        let usecheckmark = document.getElementById('learningmap-usecheckmark');\n        // Attach a listener to the usecheckmark checkbox\n        if (usecheckmark) {\n            usecheckmark.checked = placestore.getUseCheckmark();\n            usecheckmark.addEventListener('change', function() {\n                placestore.setUseCheckmark(usecheckmark.checked);\n                updateCSS();\n            });\n        }\n\n        let hover = document.getElementById('learningmap-hover');\n        // Attach a listener to the hover checkbox\n        if (hover) {\n            hover.checked = placestore.getHover();\n            hover.addEventListener('change', function() {\n                placestore.setHover(hover.checked);\n                updateCSS();\n            });\n        }\n\n        let pulse = document.getElementById('learningmap-pulse');\n        // Attach a listener to the pulse checkbox\n        if (pulse) {\n            pulse.checked = placestore.getPulse();\n            pulse.addEventListener('change', function() {\n                placestore.setPulse(pulse.checked);\n                updateCSS();\n            });\n        }\n\n        let showall = document.getElementById('learningmap-showall');\n        // Attach a listener to the showall checkbox\n        if (showall) {\n            showall.checked = placestore.getShowall();\n            showall.addEventListener('change', function() {\n                placestore.setShowall(showall.checked);\n                updateCSS();\n            });\n        }\n\n        let showtext = document.getElementById('learningmap-showtext');\n        // Attach a listener to the showall checkbox\n        if (showtext) {\n            showtext.checked = placestore.getShowText();\n            showtext.addEventListener('change', function() {\n                placestore.setShowText(showtext.checked);\n                let options = Array.from(activitySelector.getElementsByTagName('option'));\n                let places = placestore.getPlaces();\n                for (const place of places) {\n                    if (document.getElementById('text' + place.id) === null) {\n                        let content = '';\n                        for (const option of options) {\n                            if (option.value == place.linkedActivity) {\n                                content = option.textContent;\n                                break;\n                            }\n                        }\n                        let placeNode = document.getElementById(place.id);\n                        let textNode = text('text' + place.id, content, placeNode.cx.baseVal.value, placeNode.cy.baseVal.value);\n                        placeNode.parentNode.appendChild(textNode);\n                    }\n                }\n                updateCSS();\n\n            });\n        }\n    }\n\n    // Attach listener to the color choosers for paths\n    if (colorChooserPath) {\n        colorChooserPath.addEventListener('change', function() {\n            placestore.setColor('stroke', colorChooserPath.value);\n            placestore.setColor('text', colorChooserPath.value);\n            updateCSS();\n        });\n        colorChooserPath.value = placestore.getColor('stroke');\n    }\n\n    // Attach listener to the color choosers for places\n    if (colorChooserPlace) {\n        colorChooserPlace.addEventListener('change', function() {\n            placestore.setColor('place', colorChooserPlace.value);\n            updateCSS();\n        });\n        colorChooserPlace.value = placestore.getColor('place');\n    }\n\n    // Attach listener to the color choosers for visited places\n    if (colorChooserVisited) {\n        colorChooserVisited.addEventListener('change', function() {\n            placestore.setColor('visited', colorChooserVisited.value);\n            updateCSS();\n        });\n        colorChooserVisited.value = placestore.getColor('visited');\n    }\n\n    // Get SVG code from the (hidden) textarea field\n    if (code && mapdiv) {\n        mapdiv.innerHTML = code.value;\n    }\n    // Reload background image to get the correct width and height values\n    refreshBackgroundImage();\n    registerBackgroundListener();\n    updateCode();\n\n    // Enable dragging of places\n    let svg = document.getElementById('learningmap-svgmap-' + placestore.getMapid());\n    makeDraggable(svg);\n\n    // Refresh stylesheet values from placestore\n    updateCSS();\n\n    // Add listeners for clicking and context menu\n    if (mapdiv) {\n        mapdiv.addEventListener('dblclick', dblclickHandler);\n        mapdiv.addEventListener('click', clickHandler);\n\n        mapdiv.addEventListener('contextmenu', function(e) {\n            e.preventDefault();\n            showContextMenu(e);\n        }, false);\n    }\n    /**\n     * Shows the context menu at the current mouse position\n     * @param {*} e\n     */\n    function showContextMenu(e) {\n        unselectAll();\n        if (activitySetting) {\n            if (e.touches) {\n                e = e.touches[0];\n            }\n            if (e.target.classList.contains('learningmap-place')) {\n                e.target.classList.add('learningmap-selected-activity-selector');\n                let activityId = placestore.getActivityId(e.target.id);\n                let scalingFactor = mapdiv.clientWidth / 800;\n                activitySetting.style.setProperty('--pos-x', e.target.cx.baseVal.value * scalingFactor + 'px');\n                activitySetting.style.setProperty('--pos-y', e.target.cy.baseVal.value * scalingFactor + 'px');\n                activitySetting.style.setProperty('--map-width', mapdiv.clientWidth + 'px');\n                activitySetting.style.setProperty('--map-height', mapdiv.clientHeight + 'px');\n                activitySetting.style.display = 'block';\n                document.getElementById('learningmap-activity-selector').value = activityId;\n                document.getElementById('learningmap-activity-starting').checked = placestore.isStartingPlace(e.target.id);\n                document.getElementById('learningmap-activity-target').checked = placestore.isTargetPlace(e.target.id);\n                elementForActivitySelector = e.target.id;\n                updateActivities();\n            } else {\n                hideContextMenu();\n            }\n        }\n    }\n\n    /**\n     * Hides the context menu\n     */\n    function hideContextMenu() {\n        let e = document.getElementById(elementForActivitySelector);\n        if (e) {\n            e.classList.remove('learningmap-selected-activity-selector');\n        }\n        activitySetting.style.display = 'none';\n    }\n\n    let backgroundfileNode = document.getElementById('id_introeditor_itemid_fieldset');\n    if (backgroundfileNode) {\n        let observer = new MutationObserver(refreshBackgroundImage);\n        observer.observe(backgroundfileNode, {attributes: true, childList: true, subtree: true});\n    }\n\n    /**\n     * Helper function for getting the right coordinates from the mouse\n     * @param {*} evt\n     * @returns {object}\n     */\n    function getMousePosition(evt) {\n        var CTM = dragel.getScreenCTM();\n        if (evt.touches) {\n            evt = evt.touches[0];\n        }\n        return {\n            x: (evt.clientX - CTM.e) / CTM.a,\n            y: (evt.clientY - CTM.f) / CTM.d\n        };\n    }\n\n    /**\n     * Enables dragging on an DOM node\n     * @param {*} el\n     */\n    function makeDraggable(el) {\n        dragel = el;\n        if (el) {\n            el.addEventListener('mousedown', startDrag);\n            el.addEventListener('mousemove', drag);\n            el.addEventListener('mouseup', endDrag);\n            el.addEventListener('mouseleave', endDrag);\n            el.addEventListener('touchstart', startTouch);\n            el.addEventListener('touchmove', drag);\n            el.addEventListener('touchend', endTouch);\n            el.addEventListener('touchleave', endTouch);\n            el.addEventListener('touchcancel', endTouch);\n        }\n\n        /**\n         * Function called whenn dragging starts.\n         * @param {*} evt\n         */\n        function startDrag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            if (evt.target.classList.contains('learningmap-draggable')) {\n                selectedElement = evt.target;\n                offset = getMousePosition(evt);\n                offset.x -= parseInt(selectedElement.getAttributeNS(null, \"cx\"));\n                offset.y -= parseInt(selectedElement.getAttributeNS(null, \"cy\"));\n                // Get paths that need to be updated.\n                pathsToUpdateFirstPoint = placestore.getPathsWithFid(selectedElement.id);\n                pathsToUpdateSecondPoint = placestore.getPathsWithSid(selectedElement.id);\n            } else if (evt.target.nodeName == 'text') {\n                selectedElement = evt.target;\n                let place = selectedElement.parentNode.querySelector('.learningmap-place');\n                offset = getMousePosition(evt);\n                offset.x -= parseInt(selectedElement.getAttributeNS(null, \"dx\")) + place.cx.baseVal.value;\n                offset.y -= parseInt(selectedElement.getAttributeNS(null, \"dy\")) + place.cy.baseVal.value;\n                pathsToUpdateFirstPoint = [];\n                pathsToUpdateSecondPoint = [];\n            }\n        }\n\n        /**\n         * Function called during dragging. Continuously updates circles center coordinates and the\n         * coordinates of the touching paths.\n         * @param {*} evt\n         */\n        function drag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            // Count touchmove events\n            touchmove++;\n            if (selectedElement) {\n                var coord = getMousePosition(evt);\n                if (selectedElement.nodeName == 'text') {\n                    let place = selectedElement.parentNode.querySelector('.learningmap-place');\n                    // Calculate the delta from the current mouse position to the corresponding place.\n                    // coord: current mouse position\n                    // offset: delta from the mouse position to the coordinates of the text node\n                    let dx = coord.x - offset.x - place.cx.baseVal.value;\n                    let dy = coord.y - offset.y - place.cy.baseVal.value;\n                    selectedElement.setAttributeNS(null, \"dx\", dx);\n                    selectedElement.setAttributeNS(null, \"dy\", dy);\n                }\n                if (selectedElement.nodeName == 'circle') {\n                    let cx = coord.x - offset.x;\n                    let cy = coord.y - offset.y;\n                    selectedElement.setAttributeNS(null, \"cx\", cx);\n                    selectedElement.setAttributeNS(null, \"cy\", cy);\n                    let textNoode = document.getElementById('text' + selectedElement.id);\n                    if (!(textNoode === null)) {\n                        textNoode.setAttributeNS(null, 'x', cx);\n                        textNoode.setAttributeNS(null, 'y', cy);\n                    }\n                    pathsToUpdateFirstPoint.forEach(function(path) {\n                        let pathNode = document.getElementById(path.id);\n                        if (!(pathNode === null)) {\n                            if (pathNode.nodeName == 'path') {\n                                let pathDeclaration = pathNode.getAttribute('d');\n                                let newPathDeclaration = 'M ' + cx + ' ' + cy + ' L' + pathDeclaration.split('L')[1];\n                                pathNode.setAttribute('d', newPathDeclaration);\n                            } else {\n                                pathNode.setAttribute('x1', cx);\n                                pathNode.setAttribute('y1', cy);\n                            }\n                        }\n                    });\n\n                    pathsToUpdateSecondPoint.forEach(function(path) {\n                        let pathNode = document.getElementById(path.id);\n                        if (!(pathNode === null)) {\n                            if (pathNode.nodeName == 'path') {\n                                let pathDeclaration = pathNode.getAttribute('d');\n                                let newPathDeclaration = pathDeclaration.split('L')[0] + 'L ' + cx + ' ' + cy;\n                                pathNode.setAttribute('d', newPathDeclaration);\n                            } else {\n                                pathNode.setAttribute('x2', cx);\n                                pathNode.setAttribute('y2', cy);\n                            }\n                        }\n                    });\n                }\n            }\n        }\n\n        /**\n         * Function called when dragging ends.\n         * @param {*} evt\n         */\n        function endDrag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            selectedElement = null;\n            unselectAll();\n            updateCode();\n        }\n\n        /**\n         * Function called when touchstart event occurs.\n         * @param {*} evt\n         */\n        function startTouch(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            if (evt.target.classList.contains('learningmap-draggable') || evt.target.nodeName == 'text') {\n                if (!touchstart) {\n                    touchstart = true;\n                    touchmove = 0;\n                    touchend = false;\n                    setTimeout(\n                        (evt) => {\n                            if (touchmove < 3 && !touchend) {\n                                if (evt.touches) {\n                                    evt = evt.touches[0];\n                                }\n                                showContextMenu(evt);\n                            }\n                        },\n                        2000,\n                        evt\n                    );\n                    setTimeout(\n                        () => {\n                            touchstart = false;\n                        },\n                    300);\n                } else {\n                    dblclickHandler(evt);\n                    touchstart = false;\n                }\n                startDrag(evt);\n            } else {\n                if (!touchstart) {\n                    touchstart = true;\n                    touchend = false;\n                    touchmove = 0;\n                    setTimeout(\n                        () => {\n                            touchstart = false;\n                        },\n                    300);\n                } else {\n                    dblclickHandler(evt);\n                    touchstart = false;\n                }\n            }\n        }\n\n        /**\n         * Function called when touchend, touchleave or touchcancel event occurs.\n         * @param {*} evt\n         */\n        function endTouch(evt) {\n            selectedElement = null;\n            touchend = true;\n            // If there was only a small move (<3 move events), this also counts as a click.\n            if (touchmove < 3 && touchstart) {\n                clickHandler(evt);\n            } else {\n                endDrag(evt);\n            }\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n        }\n    }\n\n    /**\n     * Updates the form fields for the SVG code and the placestore from the editor.\n     */\n    function updateCode() {\n        if (code && mapdiv) {\n            code.innerHTML = mapdiv.innerHTML;\n        }\n        if (placestoreInput) {\n            document.getElementsByName('placestore')[0].value = JSON.stringify(placestore.getPlacestore());\n        }\n    }\n\n    /**\n     * Handles double clicks on the map\n     * @param {*} event\n     */\n    function dblclickHandler(event) {\n        hideContextMenu();\n        unselectAll();\n        if (event.target.classList.contains('learningmap-mapcontainer') ||\n            event.target.classList.contains('learningmap-background-image')) {\n            addPlace(event);\n        } else if (event.target.classList.contains('learningmap-place')) {\n            if (lastTarget == event.target.id) {\n                lastTarget = null;\n                clickHandler(event);\n            } else {\n                removePlace(event);\n            }\n        } else if (event.target.classList.contains('learningmap-path')) {\n            removePath(event.target.id);\n        }\n        updateCode();\n    }\n\n    /**\n     * Returns an empty title tag with the given id.\n     * @param {*} id id for the title\n     * @returns {any}\n     */\n    function title(id) {\n        let title = document.createElementNS('http://www.w3.org/2000/svg', 'title');\n        title.setAttribute('id', id);\n        return title;\n    }\n\n    /**\n     * Returns an text tag with the given id.\n     * @param {*} id id for the text\n     * @param {*} content content of the tag\n     * @param {*} x x coordinate of the text\n     * @param {*} y y coordinate of the text\n     * @returns {any}\n     */\n     function text(id, content, x, y) {\n        let text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        text.setAttribute('id', id);\n        text.setAttribute('x', x);\n        text.setAttribute('y', y);\n        // Default value for delta: Circle radius * 1.5 (as a padding)\n        text.setAttribute('dx', 10 * 1.5);\n        text.setAttribute('dy', 10 * 1.5);\n        text.textContent = content;\n        return text;\n    }\n\n    /**\n     * Returns a circle tag with the given dimensions.\n     * @param {*} x x coordinate of the center\n     * @param {*} y y coordinate of the center\n     * @param {*} r radius\n     * @param {*} classes classes to add\n     * @param {*} id id of the circle\n     * @returns {any}\n     */\n    function circle(x, y, r, classes, id) {\n        let circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n        circle.setAttribute('class', classes);\n        circle.setAttribute('id', id);\n        circle.setAttribute('cx', x);\n        circle.setAttribute('cy', y);\n        circle.setAttribute('r', r);\n        return circle;\n    }\n\n    /**\n     * Returns a path between two points.\n     * @param {*} x1 x coordinate of the first point\n     * @param {*} y1 y coordinate of the first point\n     * @param {*} x2 x coordinate of the second point\n     * @param {*} y2 y coordinate of the second point\n     * @param {*} classes CSS classes to set\n     * @param {*} id id of the path\n     * @returns {any}\n     */\n     function path(x1, y1, x2, y2, classes, id) {\n        let path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        path.setAttribute('class', classes);\n        path.setAttribute('id', id);\n        path.setAttribute('d', 'M ' + x1 + ' ' + y1 + ' L ' + x2 + ' ' + y2);\n        return path;\n    }\n\n    /**\n     * Returns a link around a given child element. This function also adds a title element next\n     * to the child for accessibility.\n     * @param {*} child child item to set the link on\n     * @param {*} id id of the link\n     * @param {*} title title of the link\n     * @param {*} text text to describe the link\n     * @returns {any}\n     */\n    function link(child, id, title = null, text = null) {\n        let link = document.createElementNS('http://www.w3.org/2000/svg', 'a');\n        link.setAttribute('id', id);\n        link.setAttribute('xlink:href', '');\n        link.appendChild(child);\n        if (!(title === null)) {\n            link.appendChild(title);\n        }\n        if (!(text === null)) {\n            link.appendChild(text);\n        }\n        return link;\n    }\n\n    /**\n     * Adds a place on the SVG map. This function also prepares the code for linking activities\n     * and adding titles (for accessibility).\n     * @param {*} event event causing the command\n     */\n    function addPlace(event) {\n        let placesgroup = document.getElementById('placesGroup');\n        let placeId = 'p' + placestore.getId();\n        let linkId = 'a' + placestore.getId();\n        var CTM = event.target.getScreenCTM();\n        if (event.touches) {\n            event = event.touches[0];\n        }\n        let cx = (event.clientX - CTM.e) / CTM.a;\n        let cy = (event.clientY - CTM.f) / CTM.d;\n        placesgroup.appendChild(\n            link(\n                circle(cx, cy, 10, 'learningmap-place learningmap-draggable learningmap-emptyplace', placeId),\n                linkId,\n                title('title' + placeId),\n                text('text' + placeId, '', cx, cy)\n            )\n        );\n        placestore.addPlace(placeId, linkId);\n    }\n\n    /**\n     * Handles single clicks on the background image.\n     * @param {*} event click event\n     * @returns {void}\n     */\n    function clickHandler(event) {\n        event.preventDefault();\n        hideContextMenu();\n        if (event.target.classList.contains('learningmap-place') && selectedElement === null) {\n            if (firstPlace === null) {\n                firstPlace = event.target.id;\n                document.getElementById(firstPlace).classList.add('learningmap-selected');\n            } else {\n                secondPlace = event.target.id;\n                let fid = parseInt(firstPlace.replace('p', ''));\n                let sid = parseInt(secondPlace.replace('p', ''));\n                if (sid == fid) {\n                    return;\n                }\n                if (sid < fid) {\n                    let z = sid;\n                    sid = fid;\n                    fid = z;\n                }\n                addPath(fid, sid);\n                let first = document.getElementById(firstPlace);\n                if (first) {\n                    first.classList.remove('learningmap-selected');\n                }\n                firstPlace = null;\n                lastTarget = secondPlace;\n                secondPlace = null;\n            }\n        } else {\n            unselectAll();\n            firstPlace = null;\n        }\n    }\n    /**\n     * Removes the classes 'learningmap-selected' and 'learningmap-selectet-activity-selector'\n     * from all nodes\n     */\n    function unselectAll() {\n        Array.from(document.getElementsByClassName('learningmap-selected')).forEach(function(e) {\n            e.classList.remove('learningmap-selected');\n        });\n        Array.from(document.getElementsByClassName('learningmap-selected-activity-selector')).forEach(function(e) {\n            e.classList.remove('learningmap-selected-activity-selector');\n        });\n    }\n\n    /**\n     * Adds a path between two places.\n     * @param {number} fid id of the first place (meant to be the smaller one)\n     * @param {number} sid id of the second place (meant to be the bigger one)\n     */\n    function addPath(fid, sid) {\n        let pid = 'p' + fid + '_' + sid;\n        if (document.getElementById(pid) === null) {\n            let pathsgroup = document.getElementById('pathsGroup');\n            let first = document.getElementById('p' + fid);\n            let second = document.getElementById('p' + sid);\n            if (pathsgroup && first && second) {\n                pathsgroup.appendChild(\n                    path(\n                        first.cx.baseVal.value,\n                        first.cy.baseVal.value,\n                        second.cx.baseVal.value,\n                        second.cy.baseVal.value,\n                        'learningmap-path',\n                        pid\n                    )\n                );\n                placestore.addPath(pid, 'p' + fid, 'p' + sid);\n            }\n        }\n    }\n\n    /**\n     * Removes a place from the SVG and the placestore. This function also removes all\n     * touching paths and entries in statringplaces / targetplaces linking to the removed\n     * place.\n     * @param {any} event event causing the remove order\n     */\n    function removePlace(event) {\n        let place = document.getElementById(event.target.id);\n        let parent = place.parentNode;\n        removePathsTouchingPlace(event.target.id);\n        placestore.removePlace(event.target.id);\n        parent.removeChild(place);\n        parent.parentNode.removeChild(parent);\n\n        updateCode();\n    }\n\n    /**\n     * Removes all paths touching a certain place\n     * @param {number} id id of the place\n     */\n    function removePathsTouchingPlace(id) {\n        placestore.getTouchingPaths(id).forEach(\n            function(e) {\n                removePath(e.id);\n            }\n        );\n    }\n\n    /**\n     * Removes a path from the SVG and from the placestore\n     * @param {number} id id of the path\n     */\n    function removePath(id) {\n        let path = document.getElementById(id);\n        if (!(path === null)) {\n            path.parentNode.removeChild(path);\n            placestore.removePath(id);\n        }\n    }\n\n    /**\n     * Sets the background image of the SVG to the current image in filemanager.\n     */\n    function refreshBackgroundImage() {\n        let previewimage = document.getElementsByClassName('realpreview');\n        if (previewimage.length > 0) {\n            let background = document.getElementById('learningmap-background-image');\n            let backgroundurl = previewimage[0].getAttribute('src').split('?')[0];\n            // If the uploaded file reuses the filename of a previously uploaded image, they differ\n            // only in the oid. So one has to append the oid to the url.\n            if (previewimage[0].getAttribute('src').split('?')[1].includes('&oid=')) {\n                backgroundurl += '?oid=' + previewimage[0].getAttribute('src').split('&oid=')[1];\n            }\n            background.setAttribute('xlink:href', backgroundurl);\n        }\n    }\n\n    /**\n     * Adds an eventListener to the background image for watching file changes and updating\n     * height and width of the image.\n     */\n    function registerBackgroundListener() {\n        let background = document.getElementById('learningmap-background-image');\n        if (background) {\n            background.addEventListener('load', function() {\n                background.removeAttribute('height');\n                let height = parseInt(background.getBBox().height);\n                let width = background.getBBox().width;\n                placestore.setBackgroundDimensions(width, height);\n                svg.setAttribute('viewBox', '0 0 ' + placestore.width + ' ' + placestore.height);\n                background.setAttribute('width', width);\n                background.setAttribute('height', height);\n                updateCode();\n            });\n        }\n    }\n\n    /**\n     * Updates CSS code inside the SVG (called, when one of the colors is changed).\n     * Calls updateCode() when completed.\n     */\n    function updateCSS() {\n        Templates.renderForPromise('mod_learningmap/cssskeleton', placestore.getPlacestore())\n            .then(({html, js}) => {\n                Templates.replaceNode('#learningmap-svgstyle', html, js);\n                updateCode();\n                return true;\n            })\n            .catch(ex => displayException(ex));\n    }\n\n    /**\n     * Updates the activity selector to highlight the activities already used\n     * and to show the alert for hidden activities.\n     */\n    function updateActivities() {\n        let activities = placestore.getAllActivities();\n        let options = Array.from(activitySelector.getElementsByTagName('option'));\n        activityHiddenWarning.setAttribute('hidden', '');\n        options.forEach(function(n) {\n            if (activities.includes(n.value)) {\n                n.classList.add('learningmap-used-activity');\n                if (n.selected) {\n                    if (n.getAttribute('data-activity-hidden') == true) {\n                        activityHiddenWarning.removeAttribute('hidden');\n                    }\n                }\n            } else {\n                n.classList.remove('learningmap-used-activity');\n            }\n        });\n    }\n};\n"],"names":["offset","dragel","pathsToUpdateFirstPoint","pathsToUpdateSecondPoint","prefetchTemplates","selectedElement","firstPlace","secondPlace","lastTarget","elementForActivitySelector","touchstart","touchend","touchmove","mapdiv","document","getElementById","code","colorChooserPlace","colorChooserVisited","colorChooserPath","activitySetting","activitySelector","activityStarting","activityTarget","activityHiddenWarning","advancedSettingsIcon","treeView","querySelector","setAttribute","iconView","setTimeout","dispatchEvent","Event","addEventListener","setActivityId","value","text","textContent","classList","remove","add","updateActivities","updateCode","checked","addStartingPlace","removeStartingPlace","addTargetPlace","removeTargetPlace","placestoreInput","getElementsByName","loadJSON","advancedSettings","getAttribute","removeAttribute","advancedSettingsClose","hidepaths","placestore","getHidePaths","setHidePaths","updateCSS","hidestroke","getStrokeOpacity","setStrokeOpacity","usecheckmark","getUseCheckmark","setUseCheckmark","hover","getHover","setHover","pulse","getPulse","setPulse","showall","getShowall","setShowall","showtext","getShowText","setShowText","options","Array","from","getElementsByTagName","places","getPlaces","place","id","content","option","linkedActivity","placeNode","textNode","cx","baseVal","cy","parentNode","appendChild","setColor","getColor","innerHTML","refreshBackgroundImage","background","height","parseInt","getBBox","width","setBackgroundDimensions","svg","registerBackgroundListener","getMapid","showContextMenu","e","unselectAll","touches","target","contains","activityId","getActivityId","scalingFactor","clientWidth","style","setProperty","clientHeight","display","isStartingPlace","isTargetPlace","hideContextMenu","el","startDrag","drag","endDrag","evt","cancelable","preventDefault","nodeName","dblclickHandler","endTouch","getMousePosition","x","getAttributeNS","y","getPathsWithFid","getPathsWithSid","coord","dx","dy","setAttributeNS","textNoode","forEach","path","pathNode","pathDeclaration","newPathDeclaration","split","clickHandler","makeDraggable","backgroundfileNode","MutationObserver","observe","attributes","childList","subtree","CTM","getScreenCTM","clientX","a","clientY","f","d","JSON","stringify","getPlacestore","event","placesgroup","placeId","getId","linkId","child","title","link","createElementNS","r","classes","circle","addPlace","parent","getTouchingPaths","removePath","removePlace","removeChild","fid","replace","sid","z","pid","pathsgroup","first","second","x1","y1","x2","y2","addPath","getElementsByClassName","previewimage","length","backgroundurl","includes","renderForPromise","then","_ref","html","js","replaceNode","catch","ex","activities","getAllActivities","n","selected"],"mappings":"ubAIoB,SAKZA,OAGAC,OAIAC,wBAAyBC,4CAVnBC,kBAAkB,CAAC,oCAazBC,gBAAkB,KAClBC,WAAa,KACbC,YAAc,KACdC,WAAa,KAGbC,2BAA6B,KAI7BC,YAAa,EACbC,UAAW,EAEXC,UAAY,MAGZC,OAASC,SAASC,eAAe,0BACjCC,KAAOF,SAASC,eAAe,uBAC/BE,kBAAoBH,SAASC,eAAe,2BAC5CG,oBAAsBJ,SAASC,eAAe,6BAC9CI,iBAAmBL,SAASC,eAAe,0BAG3CK,gBAAkBN,SAASC,eAAe,gCAC1CM,iBAAmBP,SAASC,eAAe,iCAC3CO,iBAAmBR,SAASC,eAAe,iCAC3CQ,eAAiBT,SAASC,eAAe,+BACzCS,sBAAwBV,SAASC,eAAe,uCAChDU,qBAAuBX,SAASC,eAAe,sCAG/CW,SAAWZ,SAASa,cAAc,2BAClCD,UACAA,SAASE,aAAa,QAAS,sBAI/BC,SAAWf,SAASa,cAAc,4BAClCE,UAEAC,YAAW,KACPD,SAASE,cAAc,IAAIC,MAAM,YAClC,KAIHX,mBAEAA,iBAAiBY,iBAAiB,UAAU,kCAC7BC,cAAczB,2BAA4BY,iBAAiBc,OAClEd,iBAAiBc,MAAO,KACpBC,KAAOtB,SAASC,eAAe,OAASN,4BACxC2B,OACAA,KAAKC,YAAchB,iBAAiBM,cAAc,iBAAmBN,iBAAiBc,MAAQ,MAAME,aAExGvB,SAASC,eAAeN,4BAA4B6B,UAAUC,OAAO,+BAErEzB,SAASC,eAAeN,4BAA4B6B,UAAUE,IAAI,0BAEtEC,mBACAC,gBAGJpB,iBAAiBW,iBAAiB,UAAU,WACpCX,iBAAiBqB,4BACNC,iBAAiBnC,gDAEjBoC,oBAAoBpC,4BAEnCiC,gBAGJnB,eAAeU,iBAAiB,UAAU,WAClCV,eAAeoB,6BACJG,eAAerC,4BAC1BK,SAASC,eAAeN,4BAA4B6B,UAAUE,IAAI,iDAEvDO,kBAAkBtC,4BAC7BK,SAASC,eAAeN,4BAA4B6B,UAAUC,OAAO,4BAEzEG,qBAKJM,gBAAkBlC,SAASmC,kBAAkB,cAAc,MAC3DD,qCACWE,SAASF,gBAAgBb,OAIxCM,mBAGIhB,qBAAsB,KAClB0B,iBAAmBrC,SAASC,eAAe,iCAC/CU,qBAAqBQ,iBAAiB,SAAS,WACK,OAA5CkB,iBAAiBC,aAAa,UAC9BD,iBAAiBvB,aAAa,SAAU,IAExCuB,iBAAiBE,gBAAgB,iBAGrCC,sBAAwBxC,SAASC,eAAe,uCAChDuC,uBACAA,sBAAsBrB,iBAAiB,SAAS,WAC5CkB,iBAAiBvB,aAAa,SAAU,WAI5C2B,UAAYzC,SAASC,eAAe,yBAEpCwC,YACAA,UAAUZ,QAAUa,oBAAWC,eAC/BF,UAAUtB,iBAAiB,UAAU,+BACtByB,aAAaH,UAAUZ,SAClCgB,oBAIJC,WAAa9C,SAASC,eAAe,0BAErC6C,aACAA,WAAWjB,QAAUa,oBAAWK,mBAAqB,EACrDD,WAAW3B,iBAAiB,UAAU,+BACvB6B,iBAAiBF,WAAWjB,QAAU,EAAI,GACrDgB,oBAIJI,aAAejD,SAASC,eAAe,4BAEvCgD,eACAA,aAAapB,QAAUa,oBAAWQ,kBAClCD,aAAa9B,iBAAiB,UAAU,+BACzBgC,gBAAgBF,aAAapB,SACxCgB,oBAIJO,MAAQpD,SAASC,eAAe,qBAEhCmD,QACAA,MAAMvB,QAAUa,oBAAWW,WAC3BD,MAAMjC,iBAAiB,UAAU,+BAClBmC,SAASF,MAAMvB,SAC1BgB,oBAIJU,MAAQvD,SAASC,eAAe,qBAEhCsD,QACAA,MAAM1B,QAAUa,oBAAWc,WAC3BD,MAAMpC,iBAAiB,UAAU,+BAClBsC,SAASF,MAAM1B,SAC1BgB,oBAIJa,QAAU1D,SAASC,eAAe,uBAElCyD,UACAA,QAAQ7B,QAAUa,oBAAWiB,aAC7BD,QAAQvC,iBAAiB,UAAU,+BACpByC,WAAWF,QAAQ7B,SAC9BgB,oBAIJgB,SAAW7D,SAASC,eAAe,wBAEnC4D,WACAA,SAAShC,QAAUa,oBAAWoB,cAC9BD,SAAS1C,iBAAiB,UAAU,+BACrB4C,YAAYF,SAAShC,aAC5BmC,QAAUC,MAAMC,KAAK3D,iBAAiB4D,qBAAqB,WAC3DC,OAAS1B,oBAAW2B,gBACnB,MAAMC,SAASF,UACmC,OAA/CpE,SAASC,eAAe,OAASqE,MAAMC,IAAc,KACjDC,QAAU,OACT,MAAMC,UAAUT,WACbS,OAAOpD,OAASiD,MAAMI,eAAgB,CACtCF,QAAUC,OAAOlD,sBAIrBoD,UAAY3E,SAASC,eAAeqE,MAAMC,IAC1CK,SAAWtD,KAAK,OAASgD,MAAMC,GAAIC,QAASG,UAAUE,GAAGC,QAAQzD,MAAOsD,UAAUI,GAAGD,QAAQzD,OACjGsD,UAAUK,WAAWC,YAAYL,UAGzC/B,gBAORxC,mBACAA,iBAAiBc,iBAAiB,UAAU,+BAC7B+D,SAAS,SAAU7E,iBAAiBgB,2BACpC6D,SAAS,OAAQ7E,iBAAiBgB,OAC7CwB,eAEJxC,iBAAiBgB,MAAQqB,oBAAWyC,SAAS,WAI7ChF,oBACAA,kBAAkBgB,iBAAiB,UAAU,+BAC9B+D,SAAS,QAAS/E,kBAAkBkB,OAC/CwB,eAEJ1C,kBAAkBkB,MAAQqB,oBAAWyC,SAAS,UAI9C/E,sBACAA,oBAAoBe,iBAAiB,UAAU,+BAChC+D,SAAS,UAAW9E,oBAAoBiB,OACnDwB,eAEJzC,oBAAoBiB,MAAQqB,oBAAWyC,SAAS,YAIhDjF,MAAQH,SACRA,OAAOqF,UAAYlF,KAAKmB,OAG5BgE,wCA0jBQC,WAAatF,SAASC,eAAe,gCACrCqF,YACAA,WAAWnE,iBAAiB,QAAQ,WAChCmE,WAAW/C,gBAAgB,cACvBgD,OAASC,SAASF,WAAWG,UAAUF,QACvCG,MAAQJ,WAAWG,UAAUC,0BACtBC,wBAAwBD,MAAOH,QAC1CK,IAAI9E,aAAa,UAAW,OAAS4B,oBAAWgD,MAAQ,IAAMhD,oBAAW6C,QACzED,WAAWxE,aAAa,QAAS4E,OACjCJ,WAAWxE,aAAa,SAAUyE,QAClC3D,gBAnkBZiE,GACAjE,iBAGIgE,IAAM5F,SAASC,eAAe,sBAAwByC,oBAAWoD,qBAoB5DC,gBAAgBC,MACrBC,cACI3F,mBACI0F,EAAEE,UACFF,EAAIA,EAAEE,QAAQ,IAEdF,EAAEG,OAAO3E,UAAU4E,SAAS,qBAAsB,CAClDJ,EAAEG,OAAO3E,UAAUE,IAAI,8CACnB2E,WAAa3D,oBAAW4D,cAAcN,EAAEG,OAAO5B,IAC/CgC,cAAgBxG,OAAOyG,YAAc,IACzClG,gBAAgBmG,MAAMC,YAAY,UAAWV,EAAEG,OAAOtB,GAAGC,QAAQzD,MAAQkF,cAAgB,MACzFjG,gBAAgBmG,MAAMC,YAAY,UAAWV,EAAEG,OAAOpB,GAAGD,QAAQzD,MAAQkF,cAAgB,MACzFjG,gBAAgBmG,MAAMC,YAAY,cAAe3G,OAAOyG,YAAc,MACtElG,gBAAgBmG,MAAMC,YAAY,eAAgB3G,OAAO4G,aAAe,MACxErG,gBAAgBmG,MAAMG,QAAU,QAChC5G,SAASC,eAAe,iCAAiCoB,MAAQgF,WACjErG,SAASC,eAAe,iCAAiC4B,QAAUa,oBAAWmE,gBAAgBb,EAAEG,OAAO5B,IACvGvE,SAASC,eAAe,+BAA+B4B,QAAUa,oBAAWoE,cAAcd,EAAEG,OAAO5B,IACnG5E,2BAA6BqG,EAAEG,OAAO5B,GACtC5C,wBAEAoF,2BAQHA,sBACDf,EAAIhG,SAASC,eAAeN,4BAC5BqG,GACAA,EAAExE,UAAUC,OAAO,0CAEvBnB,gBAAgBmG,MAAMG,QAAU,iBA6BbI,IACnB7H,OAAS6H,GACLA,KACAA,GAAG7F,iBAAiB,YAAa8F,WACjCD,GAAG7F,iBAAiB,YAAa+F,MACjCF,GAAG7F,iBAAiB,UAAWgG,SAC/BH,GAAG7F,iBAAiB,aAAcgG,SAClCH,GAAG7F,iBAAiB,uBAmHJiG,KACZA,IAAIC,YACJD,IAAIE,iBAEJF,IAAIjB,OAAO3E,UAAU4E,SAAS,0BAAmD,QAAvBgB,IAAIjB,OAAOoB,UAChE3H,YAsBD4H,gBAAgBJ,KAChBxH,YAAa,IAtBbA,YAAa,EACbE,UAAY,EACZD,UAAW,EACXmB,YACKoG,MACOtH,UAAY,IAAMD,WACduH,IAAIlB,UACJkB,IAAMA,IAAIlB,QAAQ,IAEtBH,gBAAgBqB,QAGxB,IACAA,KAEJpG,YACI,KACIpB,YAAa,IAErB,MAKJqH,UAAUG,MAELxH,YAUD4H,gBAAgBJ,KAChBxH,YAAa,IAVbA,YAAa,EACbC,UAAW,EACXC,UAAY,EACZkB,YACI,KACIpB,YAAa,IAErB,SA1JRoH,GAAG7F,iBAAiB,YAAa+F,MACjCF,GAAG7F,iBAAiB,WAAYsG,UAChCT,GAAG7F,iBAAiB,aAAcsG,UAClCT,GAAG7F,iBAAiB,cAAesG,oBAO9BR,UAAUG,QACXA,IAAIC,YACJD,IAAIE,iBAEJF,IAAIjB,OAAO3E,UAAU4E,SAAS,yBAC9B7G,gBAAkB6H,IAAIjB,QACtBjH,OAASwI,iBAAiBN,MACnBO,GAAKnC,SAASjG,gBAAgBqI,eAAe,KAAM,OAC1D1I,OAAO2I,GAAKrC,SAASjG,gBAAgBqI,eAAe,KAAM,OAE1DxI,wBAA0BsD,oBAAWoF,gBAAgBvI,gBAAgBgF,IACrElF,yBAA2BqD,oBAAWqF,gBAAgBxI,gBAAgBgF,SACnE,GAA2B,QAAvB6C,IAAIjB,OAAOoB,SAAoB,KAElCjD,OADJ/E,gBAAkB6H,IAAIjB,QACMnB,WAAWnE,cAAc,uBACrD3B,OAASwI,iBAAiBN,MACnBO,GAAKnC,SAASjG,gBAAgBqI,eAAe,KAAM,OAAStD,MAAMO,GAAGC,QAAQzD,MACpFnC,OAAO2I,GAAKrC,SAASjG,gBAAgBqI,eAAe,KAAM,OAAStD,MAAMS,GAAGD,QAAQzD,MACpFjC,wBAA0B,GAC1BC,yBAA2B,aAS1B6H,KAAKE,QACNA,IAAIC,YACJD,IAAIE,iBAGRxH,YACIP,gBAAiB,KACbyI,MAAQN,iBAAiBN,QACG,QAA5B7H,gBAAgBgI,SAAoB,KAChCjD,MAAQ/E,gBAAgByF,WAAWnE,cAAc,sBAIjDoH,GAAKD,MAAML,EAAIzI,OAAOyI,EAAIrD,MAAMO,GAAGC,QAAQzD,MAC3C6G,GAAKF,MAAMH,EAAI3I,OAAO2I,EAAIvD,MAAMS,GAAGD,QAAQzD,MAC/C9B,gBAAgB4I,eAAe,KAAM,KAAMF,IAC3C1I,gBAAgB4I,eAAe,KAAM,KAAMD,OAEf,UAA5B3I,gBAAgBgI,SAAsB,KAClC1C,GAAKmD,MAAML,EAAIzI,OAAOyI,EACtB5C,GAAKiD,MAAMH,EAAI3I,OAAO2I,EAC1BtI,gBAAgB4I,eAAe,KAAM,KAAMtD,IAC3CtF,gBAAgB4I,eAAe,KAAM,KAAMpD,QACvCqD,UAAYpI,SAASC,eAAe,OAASV,gBAAgBgF,IAC7C,OAAd6D,YACFA,UAAUD,eAAe,KAAM,IAAKtD,IACpCuD,UAAUD,eAAe,KAAM,IAAKpD,KAExC3F,wBAAwBiJ,SAAQ,SAASC,UACjCC,SAAWvI,SAASC,eAAeqI,KAAK/D,OACzB,OAAbgE,YACuB,QAArBA,SAAShB,SAAoB,KACzBiB,gBAAkBD,SAASjG,aAAa,KACxCmG,mBAAqB,KAAO5D,GAAK,IAAME,GAAK,KAAOyD,gBAAgBE,MAAM,KAAK,GAClFH,SAASzH,aAAa,IAAK2H,yBAE3BF,SAASzH,aAAa,KAAM+D,IAC5B0D,SAASzH,aAAa,KAAMiE,OAKxC1F,yBAAyBgJ,SAAQ,SAASC,UAClCC,SAAWvI,SAASC,eAAeqI,KAAK/D,OACzB,OAAbgE,YACuB,QAArBA,SAAShB,SAAoB,KAEzBkB,mBADkBF,SAASjG,aAAa,KACHoG,MAAM,KAAK,GAAK,KAAO7D,GAAK,IAAME,GAC3EwD,SAASzH,aAAa,IAAK2H,yBAE3BF,SAASzH,aAAa,KAAM+D,IAC5B0D,SAASzH,aAAa,KAAMiE,kBAY3CoC,QAAQC,KACTA,IAAIC,YACJD,IAAIE,iBAER/H,gBAAkB,KAClB0G,cACArE,sBA2DK6F,SAASL,KACd7H,gBAAkB,KAClBM,UAAW,EAEPC,UAAY,GAAKF,WACjB+I,aAAavB,KAEbD,QAAQC,KAERA,IAAIC,YACJD,IAAIE,kBA1QhBsB,CAAchD,KAGd/C,YAGI9C,SACAA,OAAOoB,iBAAiB,WAAYqG,iBACpCzH,OAAOoB,iBAAiB,QAASwH,cAEjC5I,OAAOoB,iBAAiB,eAAe,SAAS6E,GAC5CA,EAAEsB,iBACFvB,gBAAgBC,MACjB,QA2CH6C,mBAAqB7I,SAASC,eAAe,qCAC7C4I,mBAAoB,CACL,IAAIC,iBAAiBzD,wBAC3B0D,QAAQF,mBAAoB,CAACG,YAAY,EAAMC,WAAW,EAAMC,SAAS,aAQ7ExB,iBAAiBN,SAClB+B,IAAMhK,OAAOiK,sBACbhC,IAAIlB,UACJkB,IAAMA,IAAIlB,QAAQ,IAEf,CACHyB,GAAIP,IAAIiC,QAAUF,IAAInD,GAAKmD,IAAIG,EAC/BzB,GAAIT,IAAImC,QAAUJ,IAAIK,GAAKL,IAAIM,YAwM9B7H,aACD1B,MAAQH,SACRG,KAAKkF,UAAYrF,OAAOqF,WAExBlD,kBACAlC,SAASmC,kBAAkB,cAAc,GAAGd,MAAQqI,KAAKC,UAAUjH,oBAAWkH,2BAQ7EpC,gBAAgBqC,OACrB9C,kBACAd,cACI4D,MAAM1D,OAAO3E,UAAU4E,SAAS,6BAChCyD,MAAM1D,OAAO3E,UAAU4E,SAAS,yCA+GtByD,WACVC,YAAc9J,SAASC,eAAe,eACtC8J,QAAU,IAAMrH,oBAAWsH,QAC3BC,OAAS,IAAMvH,oBAAWsH,YAC1Bb,IAAMU,MAAM1D,OAAOiD,eACnBS,MAAM3D,UACN2D,MAAQA,MAAM3D,QAAQ,QAEtBrB,IAAMgF,MAAMR,QAAUF,IAAInD,GAAKmD,IAAIG,EACnCvE,IAAM8E,MAAMN,QAAUJ,IAAIK,GAAKL,IAAIM,EACvCK,YAAY7E,qBA7BFiF,MAAO3F,QAAI4F,6DAAQ,KAAM7I,4DAAO,KACtC8I,KAAOpK,SAASqK,gBAAgB,6BAA8B,KAClED,KAAKtJ,aAAa,KAAMyD,IACxB6F,KAAKtJ,aAAa,aAAc,IAChCsJ,KAAKnF,YAAYiF,OACD,OAAVC,OACFC,KAAKnF,YAAYkF,OAEN,OAAT7I,MACF8I,KAAKnF,YAAY3D,aAEd8I,KAmBHA,UAnEQzC,EAAGE,EAAGyC,EAAGC,QAAShG,QAC1BiG,OAASxK,SAASqK,gBAAgB,6BAA8B,iBACpEG,OAAO1J,aAAa,QAASyJ,SAC7BC,OAAO1J,aAAa,KAAMyD,IAC1BiG,OAAO1J,aAAa,KAAM6G,GAC1B6C,OAAO1J,aAAa,KAAM+G,GAC1B2C,OAAO1J,aAAa,IAAKwJ,GAClBE,OA6DCA,CAAO3F,GAAIE,GAAI,GAAI,iEAAkEgF,SACrFE,gBAxGG1F,QACP4F,MAAQnK,SAASqK,gBAAgB,6BAA8B,gBACnEF,MAAMrJ,aAAa,KAAMyD,IAClB4F,MAsGCA,CAAM,QAAUJ,SAChBzI,KAAK,OAASyI,QAAS,GAAIlF,GAAIE,0BAG5B0F,SAASV,QAASE,QAhIzBQ,CAASZ,OACFA,MAAM1D,OAAO3E,UAAU4E,SAAS,qBACnC1G,YAAcmK,MAAM1D,OAAO5B,IAC3B7E,WAAa,KACbiJ,aAAakB,iBAmNJA,WACbvF,MAAQtE,SAASC,eAAe4J,MAAM1D,OAAO5B,IAC7CmG,OAASpG,MAAMU,WAaWT,GAZLsF,MAAM1D,OAAO5B,uBAa3BoG,iBAAiBpG,IAAI8D,SAC5B,SAASrC,GACL4E,WAAW5E,EAAEzB,2BAdVsG,YAAYhB,MAAM1D,OAAO5B,IACpCmG,OAAOI,YAAYxG,OACnBoG,OAAO1F,WAAW8F,YAAYJ,QAE9B9I,iBAO8B2C,GAhOtBsG,CAAYhB,OAETA,MAAM1D,OAAO3E,UAAU4E,SAAS,qBACvCwE,WAAWf,MAAM1D,OAAO5B,IAE5B3C,sBAsBMN,KAAKiD,GAAIC,QAASmD,EAAGE,OACvBvG,KAAOtB,SAASqK,gBAAgB,6BAA8B,eAClE/I,KAAKR,aAAa,KAAMyD,IACxBjD,KAAKR,aAAa,IAAK6G,GACvBrG,KAAKR,aAAa,IAAK+G,GAEvBvG,KAAKR,aAAa,KAAM,IACxBQ,KAAKR,aAAa,KAAM,IACxBQ,KAAKC,YAAciD,QACZlD,cA8FFqH,aAAakB,UAClBA,MAAMvC,iBACNP,kBACI8C,MAAM1D,OAAO3E,UAAU4E,SAAS,sBAA4C,OAApB7G,mBACrC,OAAfC,WACAA,WAAaqK,MAAM1D,OAAO5B,GAC1BvE,SAASC,eAAeT,YAAYgC,UAAUE,IAAI,4BAC/C,CACHjC,YAAcoK,MAAM1D,OAAO5B,OACvBwG,IAAMvF,SAAShG,WAAWwL,QAAQ,IAAK,KACvCC,IAAMzF,SAAS/F,YAAYuL,QAAQ,IAAK,QACxCC,KAAOF,cAGPE,IAAMF,IAAK,KACPG,EAAID,IACRA,IAAMF,IACNA,IAAMG,YAkCLH,IAAKE,SACdE,IAAM,IAAMJ,IAAM,IAAME,OACS,OAAjCjL,SAASC,eAAekL,KAAe,KACnCC,WAAapL,SAASC,eAAe,cACrCoL,MAAQrL,SAASC,eAAe,IAAM8K,KACtCO,OAAStL,SAASC,eAAe,IAAMgL,KACvCG,YAAcC,OAASC,SACvBF,WAAWnG,qBAxHRsG,GAAIC,GAAIC,GAAIC,GAAInB,QAAShG,QAChC+D,KAAOtI,SAASqK,gBAAgB,6BAA8B,eAClE/B,KAAKxH,aAAa,QAASyJ,SAC3BjC,KAAKxH,aAAa,KAAMyD,IACxB+D,KAAKxH,aAAa,IAAK,KAAOyK,GAAK,IAAMC,GAAK,MAAQC,GAAK,IAAMC,IAC1DpD,KAoHKA,CACI+C,MAAMxG,GAAGC,QAAQzD,MACjBgK,MAAMtG,GAAGD,QAAQzD,MACjBiK,OAAOzG,GAAGC,QAAQzD,MAClBiK,OAAOvG,GAAGD,QAAQzD,MAClB,mBACA8J,0BAGGQ,QAAQR,IAAK,IAAMJ,IAAK,IAAME,OAjDzCU,CAAQZ,IAAKE,SACTI,MAAQrL,SAASC,eAAeT,YAChC6L,OACAA,MAAM7J,UAAUC,OAAO,wBAE3BjC,WAAa,KACbE,WAAaD,YACbA,YAAc,UAGlBwG,cACAzG,WAAa,cAOZyG,cACLhC,MAAMC,KAAKlE,SAAS4L,uBAAuB,yBAAyBvD,SAAQ,SAASrC,GACjFA,EAAExE,UAAUC,OAAO,2BAEvBwC,MAAMC,KAAKlE,SAAS4L,uBAAuB,2CAA2CvD,SAAQ,SAASrC,GACnGA,EAAExE,UAAUC,OAAO,sDAgElBmJ,WAAWrG,QACZ+D,KAAOtI,SAASC,eAAesE,IACpB,OAAT+D,OACFA,KAAKtD,WAAW8F,YAAYxC,0BACjBsC,WAAWrG,cAOrBc,6BACDwG,aAAe7L,SAAS4L,uBAAuB,kBAC/CC,aAAaC,OAAS,EAAG,KACrBxG,WAAatF,SAASC,eAAe,gCACrC8L,cAAgBF,aAAa,GAAGvJ,aAAa,OAAOoG,MAAM,KAAK,GAG/DmD,aAAa,GAAGvJ,aAAa,OAAOoG,MAAM,KAAK,GAAGsD,SAAS,WAC3DD,eAAiB,QAAUF,aAAa,GAAGvJ,aAAa,OAAOoG,MAAM,SAAS,IAElFpD,WAAWxE,aAAa,aAAciL,yBA4BrClJ,+BACKoJ,iBAAiB,8BAA+BvJ,oBAAWkH,iBAChEsC,MAAKC,WAACC,KAACA,KAADC,GAAOA,mCACAC,YAAY,wBAAyBF,KAAMC,IACrDzK,cACO,KAEV2K,OAAMC,KAAM,2BAAiBA,eAO7B7K,uBACD8K,WAAa/J,oBAAWgK,mBACxB1I,QAAUC,MAAMC,KAAK3D,iBAAiB4D,qBAAqB,WAC/DzD,sBAAsBI,aAAa,SAAU,IAC7CkD,QAAQqE,SAAQ,SAASsE,GACjBF,WAAWT,SAASW,EAAEtL,QACtBsL,EAAEnL,UAAUE,IAAI,6BACZiL,EAAEC,UAC4C,GAA1CD,EAAErK,aAAa,yBACf5B,sBAAsB6B,gBAAgB,WAI9CoK,EAAEnL,UAAUC,OAAO"}