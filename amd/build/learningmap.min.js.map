{"version":3,"file":"learningmap.min.js","sources":["../src/learningmap.js"],"sourcesContent":["import {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport placestore from 'mod_learningmap/placestore';\nimport svgjs from 'mod_learningmap/svg';\nimport shapes from './shapes';\n\nconst circleRadius = 10;\n\n// Constants for updatePathDeclaration.\nconst targetPoints = {\n    firstPoint: 1,\n    secondPoint: 2,\n    bezierPoint: 3,\n};\n\nconst pathTypes = {\n    line: 1,\n    quadraticbezier: 2,\n};\n\nexport const init = () => {\n    // Load the needed template on startup for better execution speed.\n    Templates.prefetchTemplates(['mod_learningmap/cssskeleton']);\n\n    // Variable for storing the mouse offset\n    var offset;\n\n    // Variable for draggable element\n    var dragel;\n\n    // Variables for storing the paths that need update of the first or\n    // the second coordinates.\n    var pathsToUpdateFirstPoint, pathsToUpdateSecondPoint;\n\n    // Variables for handling the currently selected elements\n    var selectedElement = null,\n        firstPlace = null,\n        secondPlace = null,\n        lastTarget = null;\n\n    // Variable for storing the selected element for the activity selector\n    var elementForActivitySelector = null;\n\n    // Variables for simulating double click on touch devices, set when the\n    // corresponding events are handled\n    var touchstart = false;\n    var touchend = false;\n    // Counter for touchmove events\n    var touchmove = 0;\n\n    // DOM nodes for the editor\n    let mapdiv = document.getElementById('learningmap-editor-map');\n    let code = document.getElementById('id_svgcode');\n\n    // DOM nodes for the activity selector\n    let activitySetting = document.getElementById('learningmap-activity-setting');\n    let activitySelector = document.getElementById('learningmap-activity-selector');\n    let activityStarting = document.getElementById('learningmap-activity-starting');\n    let activityTarget = document.getElementById('learningmap-activity-target');\n    let activityHiddenWarning = document.getElementById('learningmap-activity-hidden-warning');\n    let advancedSettingsIcon = document.getElementById('learningmap-advanced-settings-icon');\n\n    // Hide tree view as there is no preview file we can attach to\n    let treeView = document.querySelector('.fp-viewbar .fp-vb-tree');\n    if (treeView) {\n        treeView.setAttribute('style', 'display: none;');\n    }\n\n    // Trigger click event on icon view to ensure that tree view is not active.\n    let iconView = document.querySelector('.fp-viewbar .fp-vb-icons');\n    if (iconView) {\n        // Handle possible delay in form loading.\n        setTimeout(() => {\n            iconView.dispatchEvent(new Event('click'));\n        }, 1000);\n    }\n\n    // Attach listeners to the activity selector\n    if (activitySelector) {\n        // Show places that are not linked to an activity\n        activitySelector.addEventListener('change', function() {\n            placestore.setActivityId(elementForActivitySelector, activitySelector.value);\n            if (activitySelector.value) {\n                let text = document.getElementById('text' + elementForActivitySelector);\n                if (text) {\n                    text.textContent = activitySelector.querySelector('option[value=\"' + activitySelector.value + '\"]').textContent;\n                }\n                let title = document.getElementById('title' + elementForActivitySelector);\n                if (title) {\n                    title.textContent =\n                        activitySelector.querySelector('option[value=\"' + activitySelector.value + '\"]').textContent;\n                }\n                document.getElementById(elementForActivitySelector).classList.remove('learningmap-emptyplace');\n            } else {\n                document.getElementById(elementForActivitySelector).classList.add('learningmap-emptyplace');\n            }\n            updateActivities();\n            updateCode();\n        });\n        // Add / remove a place to the starting places array\n        activityStarting.addEventListener('change', function() {\n            if (activityStarting.checked) {\n                placestore.addStartingPlace(elementForActivitySelector);\n            } else {\n                placestore.removeStartingPlace(elementForActivitySelector);\n            }\n            updateCode();\n        });\n        // Add / remove a place to the target places array\n        activityTarget.addEventListener('change', function() {\n            if (activityTarget.checked) {\n                placestore.addTargetPlace(elementForActivitySelector);\n                document.getElementById(elementForActivitySelector).classList.add('learningmap-targetplace');\n            } else {\n                placestore.removeTargetPlace(elementForActivitySelector);\n                document.getElementById(elementForActivitySelector).classList.remove('learningmap-targetplace');\n            }\n            updateCode();\n        });\n    }\n\n    // Load placestore values from the hidden input field\n    let placestoreInput = document.getElementsByName('placestore')[0];\n    if (placestoreInput) {\n        placestore.loadJSON(placestoreInput.value);\n    }\n\n    // Mark all activities in the placestore as \"used\".\n    updateActivities();\n\n    // Attach listeners to the advanced settings div\n    if (advancedSettingsIcon) {\n        let advancedSettings = document.getElementById('learningmap-advanced-settings');\n        advancedSettingsIcon.addEventListener('click', function() {\n            if (advancedSettings.getAttribute('hidden') === null) {\n                hideAdvancedSettings();\n            } else {\n                advancedSettings.removeAttribute('hidden');\n                hideContextMenu();\n            }\n        });\n        let advancedSettingsClose = document.getElementById('learningmap-advanced-settings-close');\n        if (advancedSettingsClose) {\n            advancedSettingsClose.addEventListener('click', function() {\n                advancedSettings.setAttribute('hidden', '');\n            });\n        }\n\n        advancedSettingsLogic('hidepaths', placestore.getHidePaths, placestore.setHidePaths);\n        advancedSettingsLogic('usecheckmark', placestore.getUseCheckmark, placestore.setUseCheckmark);\n        advancedSettingsLogic('hover', placestore.getHover, placestore.setHover);\n        advancedSettingsLogic('pulse', placestore.getPulse, placestore.setPulse);\n        advancedSettingsLogic('showall', placestore.getShowall, placestore.setShowall);\n        advancedSettingsLogic('hidestroke', placestore.getHideStroke, placestore.setHideStroke);\n        advancedSettingsLogic('showtext', placestore.getShowText, placestore.setShowText, fixPlaceLabels);\n        advancedSettingsLogic('slicemode', placestore.getSliceMode, placestore.setSliceMode);\n        advancedSettingsLogic('showwaygone', placestore.getShowWayGone, placestore.setShowWayGone);\n    }\n\n    // Attach listener to the color choosers\n    colorChooserLogic('stroke', 'text');\n    colorChooserLogic('place');\n    colorChooserLogic('visited');\n\n    // Get SVG code from the (hidden) textarea field\n    if (code && mapdiv) {\n        mapdiv.innerHTML = code.value;\n    }\n    // Reload background image to get the correct width and height values\n    refreshBackgroundImage();\n    registerBackgroundListener();\n    updateCode();\n\n    // Enable dragging of places\n    let svgel = document.getElementById('learningmap-svgmap-' + placestore.getMapid());\n    makeDraggable(svgel);\n    var mapsvg = svgjs().SVG('#learningmap-svgmap-' + placestore.getMapid());\n\n    // Refresh stylesheet values from placestore\n    updateCSS();\n\n    // Add listeners for clicking and context menu\n    if (mapdiv) {\n        mapdiv.addEventListener('dblclick', dblclickHandler);\n        mapdiv.addEventListener('click', clickHandler);\n\n        mapdiv.addEventListener('contextmenu', function(e) {\n            e.preventDefault();\n            showContextMenu(e);\n        }, false);\n    }\n    /**\n     * Shows the context menu at the current mouse position\n     * @param {*} e\n     */\n    function showContextMenu(e) {\n        unselectAll();\n        hideAdvancedSettings();\n        // Check for the existence of the target (could have vanished since the event started).\n        if (activitySetting && document.getElementById(e.target.id) !== null) {\n            if (e.touches) {\n                e = e.touches[0];\n            }\n            if (e.target.classList.contains('learningmap-place')) {\n                let element = getSVGShape(e.target.id);\n                e.target.classList.add('learningmap-selected-activity-selector');\n                let activityId = placestore.getActivityId(e.target.id);\n                let scalingFactor = mapdiv.clientWidth / 800;\n                activitySetting.style.setProperty('--pos-x', element.cx() * scalingFactor + 'px');\n                activitySetting.style.setProperty('--pos-y', element.cy() * scalingFactor + 'px');\n                activitySetting.style.setProperty('--map-width', mapdiv.clientWidth + 'px');\n                activitySetting.style.setProperty('--map-height', mapdiv.clientHeight + 'px');\n                activitySetting.style.display = 'block';\n                document.getElementById('learningmap-activity-selector').value = activityId;\n                document.getElementById('learningmap-activity-starting').checked = placestore.isStartingPlace(e.target.id);\n                document.getElementById('learningmap-activity-target').checked = placestore.isTargetPlace(e.target.id);\n                elementForActivitySelector = e.target.id;\n                updateActivities();\n            } else {\n                hideContextMenu();\n                hideAdvancedSettings();\n            }\n        }\n    }\n\n    /**\n     * Hides the context menu\n     */\n    function hideContextMenu() {\n        let e = document.getElementById(elementForActivitySelector);\n        if (e) {\n            e.classList.remove('learningmap-selected-activity-selector');\n        }\n        activitySetting.style.display = 'none';\n    }\n\n    let backgroundfileNode = document.getElementById('id_backgroundfile_fieldset');\n    if (backgroundfileNode) {\n        let observer = new MutationObserver(refreshBackgroundImage);\n        observer.observe(backgroundfileNode, {attributes: true, childList: true, subtree: true});\n    }\n\n    /**\n     * Helper function for getting the right coordinates from the mouse\n     * @param {*} evt\n     * @returns {object}\n     */\n    function getMousePosition(evt) {\n        if (evt.touches) {\n            evt = evt.touches[0];\n        }\n        return transformCoordinates(evt.clientX, evt.clientY);\n    }\n\n    /**\n     * Transforms client coordinates to SVG coordinates\n     * @param {number} x x coordinate to transform\n     * @param {number} y y coordinate to transform\n     * @returns {object} Object containing transformed x and y coordinate\n     */\n    function transformCoordinates(x, y) {\n        var CTM = dragel.getScreenCTM();\n        return {\n            x: (x - CTM.e) / CTM.a,\n            y: (y - CTM.f) / CTM.d\n        };\n    }\n\n    /**\n     * Returns the SVG shape with the given id or representing the\n     * given object.\n     * @param {*} element\n     * @returns\n     */\n    function getSVGShape(element) {\n        if (typeof element === 'object') {\n            return mapsvg.findOne('#' + element.id);\n        } else {\n            return mapsvg.findOne('#' + element);\n        }\n    }\n\n    /**\n     * Enables dragging on an DOM node\n     * @param {*} el\n     */\n    function makeDraggable(el) {\n        dragel = el;\n        if (el) {\n            el.addEventListener('mousedown', startDrag);\n            el.addEventListener('mousemove', drag);\n            el.addEventListener('mouseup', endDrag);\n            el.addEventListener('mouseleave', endDrag);\n            el.addEventListener('touchstart', startTouch);\n            el.addEventListener('touchmove', drag);\n            el.addEventListener('touchend', endTouch);\n            el.addEventListener('touchleave', endTouch);\n            el.addEventListener('touchcancel', endTouch);\n        }\n\n        /**\n         * Function called whenn dragging starts.\n         * @param {*} evt\n         */\n        function startDrag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            pathsToUpdateFirstPoint = [];\n            pathsToUpdateSecondPoint = [];\n            if (evt.target.classList.contains('learningmap-draggable')) {\n                selectedElement = evt.target;\n                let svgel = getSVGShape(selectedElement);\n                offset = getMousePosition(evt);\n                offset.x -= svgel.cx();\n                offset.y -= svgel.cy();\n                // Get paths that need to be updated.\n                pathsToUpdateFirstPoint = placestore.getPathsWithFid(evt.target.id);\n                pathsToUpdateSecondPoint = placestore.getPathsWithSid(evt.target.id);\n            } else if (evt.target.nodeName == 'text') {\n                selectedElement = evt.target;\n                let svgel = getSVGShape(selectedElement);\n                let place = svgel.parent().findOne('.learningmap-place');\n                offset = getMousePosition(evt);\n                offset.x -= svgel.attr('dx') + place.cx();\n                offset.y -= svgel.attr('dy') + place.cy();\n            } else if (evt.target.nodeName == 'path') {\n                selectedElement = evt.target;\n                offset = getMousePosition(evt);\n                let pathPoint = transformCoordinates(evt.layerX, evt.layerY);\n                offset.x += pathPoint.x;\n                offset.y += pathPoint.y;\n            }\n        }\n\n        /**\n         * Function called during dragging. Continuously updates places center coordinates and the\n         * coordinates of the touching paths.\n         * @param {*} evt\n         */\n        function drag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            // Count touchmove events\n            touchmove++;\n            if (selectedElement) {\n                var coord = getMousePosition(evt);\n                let cx = coord.x - offset.x;\n                let cy = coord.y - offset.y;\n                console.log(selectedElement);\n                let closest = selectedElement.closest('.learningmap-place');\n                console.log(closest);\n                if (closest) {\n                    selectedElement = closest;\n                }\n                if (selectedElement.classList.contains('learningmap-place')) {\n                    let placeel = mapsvg.findOne('#' + selectedElement.id);\n                    placeel.center(cx, cy);\n                    let textNode = mapsvg.findOne('#text' + selectedElement.id);\n                    if (textNode !== null) {\n                        textNode.amove(cx, cy);\n                    }\n                    pathsToUpdateFirstPoint.forEach(function(path) {\n                        let pathElement = getSVGShape(path);\n                        if (pathElement !== null) {\n                            if (pathElement.type == 'path') {\n                                pathElement.attr(\n                                    {'d': updatePathDeclaration(pathElement.attr('d'), cx, cy, targetPoints.firstPoint)}\n                                );\n                            } else {\n                                pathElement.attr({'x1': cx, 'y1': cy});\n                            }\n                        }\n                    });\n\n                    pathsToUpdateSecondPoint.forEach(function(path) {\n                        let pathElement = getSVGShape(path);\n                        if (pathElement !== null) {\n                            if (pathElement.type == 'path') {\n                                pathElement.attr(\n                                    {'d': updatePathDeclaration(pathElement.attr('d'), cx, cy, targetPoints.secondPoint)}\n                                );\n                            } else {\n                                pathElement.attr({'x2': cx, 'y2': cy});\n                            }\n                        }\n                    });\n                    placestore.setBbox(selectedElement.id, placeel.parent().bbox());\n                } else if (selectedElement.nodeName == 'text') {\n                    let textel = getSVGShape(selectedElement);\n                    let place = textel.parent().findOne('.learningmap-place');\n                    // Calculate the delta from the current mouse position to the corresponding place.\n                    // coord: current mouse position\n                    // offset: delta from the mouse position to the coordinates of the text node\n                    let dx = cx - place.cx();\n                    let dy = cy - place.cy();\n                    // We cannot use the dx() and dy() functions of the text node, because they are not\n                    // setting the attributes dx and dy.\n                    textel.attr({dx: dx, dy: dy});\n                    placestore.setBbox(place.node.id, textel.parent().bbox());\n                } else if (selectedElement.nodeName == 'path') {\n                    selectedElement.setAttribute(\n                        'd',\n                        updatePathDeclaration(selectedElement.getAttribute('d'), coord.x, coord.y, targetPoints.bezierPoint)\n                    );\n                }\n            }\n        }\n\n        /**\n         * Function called when dragging ends.\n         * @param {*} evt\n         */\n        function endDrag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            selectedElement = null;\n            unselectAll();\n            updateCode();\n        }\n\n        /**\n         * Function called when touchstart event occurs.\n         * @param {*} evt\n         */\n        function startTouch(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            if (\n                evt.target.classList.contains('learningmap-draggable') ||\n                evt.target.nodeName == 'text' ||\n                evt.target.nodeName == 'path'\n            ) {\n                if (!touchstart) {\n                    touchstart = true;\n                    touchmove = 0;\n                    touchend = false;\n                    setTimeout(\n                        (evt) => {\n                            if (touchmove < 3 && !touchend) {\n                                if (evt.touches) {\n                                    evt = evt.touches[0];\n                                }\n                                showContextMenu(evt);\n                            }\n                        },\n                        2000,\n                        evt\n                    );\n                    setTimeout(\n                        () => {\n                            touchstart = false;\n                        },\n                    300);\n                } else {\n                    dblclickHandler(evt);\n                    touchstart = false;\n                }\n                startDrag(evt);\n            } else {\n                if (!touchstart) {\n                    touchstart = true;\n                    touchend = false;\n                    touchmove = 0;\n                    setTimeout(\n                        () => {\n                            touchstart = false;\n                        },\n                    300);\n                } else {\n                    dblclickHandler(evt);\n                    touchstart = false;\n                }\n            }\n        }\n\n        /**\n         * Function called when touchend, touchleave or touchcancel event occurs.\n         * @param {*} evt\n         */\n        function endTouch(evt) {\n            selectedElement = null;\n            touchend = true;\n            // If there was only a small move (<3 move events), this also counts as a click.\n            if (touchmove < 3 && touchstart) {\n                clickHandler(evt);\n            } else {\n                endDrag(evt);\n            }\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n        }\n\n        /**\n         * Updates the path declaration of lines and quadratic bezier curves setting one of the points.\n         * @param {string} oldDefinition SVG path definition string\n         * @param {number} targetX x coordinate of the point to set\n         * @param {number} targetY y coordinate of the point to set\n         * @param {number} targetP Which point to change (you can use the targetPoints constants here)\n         * @returns {string} Updated SVG path definition\n         */\n        function updatePathDeclaration(oldDefinition, targetX, targetY, targetP = targetPoints.firstPoint) {\n            let parts = oldDefinition.split(' ');\n            let fromX = 0;\n            let fromY = 0;\n            let toX = 0;\n            let toY = 0;\n            let bezierX = 0;\n            let bezierY = 0;\n            let pathType = pathTypes.line;\n\n            // The d attribute of an SVG path in a learning map can have two different formats (in this version):\n            // \"M x1 y1 L x2 y2\"        Line from x1, y1 to x2, y2\n            // \"M x1 y2 Q x3 y3 x2 y2\"  Quadratic bezier curve inside the triangle defined by x1, y1, x2, y2 and x3, y3.\n            for (let i = 0; i < parts.length; i++) {\n                // Every path contains the first point in that way.\n                if (parts[i] == 'M') {\n                    fromX = parseInt(parts[i + 1]);\n                    fromY = parseInt(parts[i + 2]);\n                    i += 2;\n                }\n                // This path is a direct line, so there are only two points in total.\n                if (parts[i] == 'L') {\n                    toX = parseInt(parts[i + 1]);\n                    toY = parseInt(parts[i + 2]);\n                    i += 2;\n                }\n                // This path is a bezier curve, there are three points in total.\n                if (parts[i] == 'Q') {\n                    bezierX = parseInt(parts[i + 1]);\n                    bezierY = parseInt(parts[i + 2]);\n                    toX = parseInt(parts[i + 3]);\n                    toY = parseInt(parts[i + 4]);\n                    i += 4;\n                    pathType = pathTypes.quadraticbezier;\n                }\n            }\n\n            switch (targetP) {\n                case targetPoints.firstPoint:\n                    fromX = targetX;\n                    fromY = targetY;\n                    break;\n                case targetPoints.secondPoint:\n                    toX = targetX;\n                    toY = targetY;\n                    break;\n                case targetPoints.bezierPoint:\n                    // Calculate the third triangle point for the bezier curve.\n                    bezierX = targetX * 2 - (fromX + toX) * 0.5;\n                    bezierY = targetY * 2 - (fromY + toY) * 0.5;\n                    pathType = pathTypes.quadraticbezier;\n                    break;\n            }\n\n            if (pathType == pathTypes.quadraticbezier) {\n                return 'M ' + fromX + ' ' + fromY + ' Q ' + bezierX + ' ' + bezierY + ', ' + toX + ' ' + toY;\n            } else {\n                return 'M ' + fromX + ' ' + fromY + ' L ' + toX + ' ' + toY;\n            }\n        }\n    }\n\n    /**\n     * Updates the form fields for the SVG code and the placestore from the editor.\n     */\n    function updateCode() {\n        if (code && mapdiv) {\n            code.innerHTML = mapdiv.innerHTML;\n        }\n        if (placestoreInput) {\n            document.getElementsByName('placestore')[0].value = JSON.stringify(placestore.getPlacestore());\n        }\n    }\n\n    /**\n     * Handles double clicks on the map\n     * @param {*} event\n     */\n    function dblclickHandler(event) {\n        hideContextMenu();\n        hideAdvancedSettings();\n        unselectAll();\n        if (event.target.classList.contains('learningmap-mapcontainer') ||\n            event.target.classList.contains('learningmap-background-image')) {\n            addPlace(event);\n        } else if (event.target.classList.contains('learningmap-place')) {\n            if (lastTarget == event.target.id) {\n                lastTarget = null;\n                clickHandler(event);\n            } else {\n                removePlace(event);\n            }\n        } else if (event.target.classList.contains('learningmap-path')) {\n            removePath(event.target.id);\n        }\n        updateCode();\n    }\n\n    /**\n     * Returns an empty title tag with the given id.\n     * @param {*} id id for the title\n     * @returns {any}\n     */\n    function title(id) {\n        return mapsvg.element('title').id(id);\n    }\n\n    /**\n     * Returns an text tag with the given id.\n     * @param {*} id id for the text\n     * @param {*} content content of the tag\n     * @param {*} x x coordinate of the text\n     * @param {*} y y coordinate of the text\n     * @returns {any}\n     */\n     function text(id, content, x, y) {\n        return mapsvg.text().attr({dx: circleRadius * 1.5, dy: circleRadius * 1.5}).plain(content).move(x, y).id(id);\n    }\n\n    /**\n     * Returns a path between two points.\n     * @param {*} x1 x coordinate of the first point\n     * @param {*} y1 y coordinate of the first point\n     * @param {*} x2 x coordinate of the second point\n     * @param {*} y2 y coordinate of the second point\n     * @param {*} classes CSS classes to set\n     * @param {*} id id of the path\n     * @returns {any}\n     */\n     function path(x1, y1, x2, y2, classes, id) {\n        return mapsvg.path('M ' + x1 + ' ' + y1 + ' L ' + x2 + ' ' + y2).attr({'class': classes}).id(id);\n    }\n\n    /**\n     * Returns a link around a given child element. This function also adds a title element next\n     * to the child for accessibility.\n     * @param {*} child child item to set the link on\n     * @param {*} id id of the link\n     * @param {*} title title of the link\n     * @param {*} text text to describe the link\n     * @returns {any}\n     */\n    function link(child, id, title = null, text = null) {\n        return mapsvg.link('').id(id).add(child).add(title).add(text);\n    }\n\n    /**\n     * Adds a place on the SVG map. This function also prepares the code for linking activities\n     * and adding titles (for accessibility).\n     * @param {*} event event causing the command\n     */\n    function addPlace(event) {\n        let placesgroup = mapsvg.findOne('#placesGroup');\n        let placeId = 'p' + placestore.getId();\n        let linkId = 'a' + placestore.getId();\n        var CTM = event.target.getScreenCTM();\n        if (event.touches) {\n            event = event.touches[0];\n        }\n        let cx = (event.clientX - CTM.e) / CTM.a;\n        let cy = (event.clientY - CTM.f) / CTM.d;\n        let svglink = link(\n            shapes.emoji(mapsvg, cx, cy, circleRadius, 'learningmap-place learningmap-draggable learningmap-emptyplace', placeId),\n            linkId,\n            title('title' + placeId),\n            text('text' + placeId, '', cx, cy)\n        );\n        svglink.addTo(placesgroup);\n        placestore.addPlace(placeId, linkId, null, svglink.bbox());\n    }\n\n    /**\n     * Handles single clicks on the background image.\n     * @param {*} event click event\n     * @returns {void}\n     */\n    function clickHandler(event) {\n        event.preventDefault();\n        hideContextMenu();\n        hideAdvancedSettings();\n        if (event.target.classList.contains('learningmap-place') && selectedElement === null) {\n            if (firstPlace === null) {\n                firstPlace = event.target.id;\n                document.getElementById(firstPlace).classList.add('learningmap-selected');\n            } else {\n                secondPlace = event.target.id;\n                let fid = parseInt(firstPlace.replace('p', ''));\n                let sid = parseInt(secondPlace.replace('p', ''));\n                if (sid == fid) {\n                    return;\n                }\n                if (sid < fid) {\n                    let z = sid;\n                    sid = fid;\n                    fid = z;\n                }\n                addPath(fid, sid);\n                let first = document.getElementById(firstPlace);\n                if (first) {\n                    first.classList.remove('learningmap-selected');\n                }\n                firstPlace = null;\n                lastTarget = secondPlace;\n                secondPlace = null;\n            }\n        } else {\n            unselectAll();\n            firstPlace = null;\n        }\n    }\n    /**\n     * Removes the classes 'learningmap-selected' and 'learningmap-selectet-activity-selector'\n     * from all nodes\n     */\n    function unselectAll() {\n        Array.from(document.getElementsByClassName('learningmap-selected')).forEach(function(e) {\n            e.classList.remove('learningmap-selected');\n        });\n        Array.from(document.getElementsByClassName('learningmap-selected-activity-selector')).forEach(function(e) {\n            e.classList.remove('learningmap-selected-activity-selector');\n        });\n    }\n\n    /**\n     * Adds a path between two places.\n     * @param {number} fid id of the first place (meant to be the smaller one)\n     * @param {number} sid id of the second place (meant to be the bigger one)\n     */\n    function addPath(fid, sid) {\n        let pid = 'p' + fid + '_' + sid;\n        if (document.getElementById(pid) === null) {\n            let pathsgroup = mapsvg.findOne('#pathsGroup');\n            let first = mapsvg.findOne('#p' + fid);\n            let second = mapsvg.findOne('#p' + sid);\n            if (pathsgroup && first && second) {\n                let svgpath = path(\n                    first.cx(),\n                    first.cy(),\n                    second.cx(),\n                    second.cy(),\n                    'learningmap-path',\n                    pid\n                );\n                svgpath.addTo(pathsgroup);\n                placestore.addPath(pid, 'p' + fid, 'p' + sid);\n            }\n        }\n    }\n\n    /**\n     * Removes a place from the SVG and the placestore. This function also removes all\n     * touching paths and entries in statringplaces / targetplaces linking to the removed\n     * place.\n     * @param {any} event event causing the remove order\n     */\n    function removePlace(event) {\n        let place = getSVGShape(event.target.id);\n        removePathsTouchingPlace(event.target.id);\n        placestore.removePlace(event.target.id);\n        place.parent().remove();\n\n        updateCode();\n    }\n\n    /**\n     * Removes all paths touching a certain place\n     * @param {number} id id of the place\n     */\n    function removePathsTouchingPlace(id) {\n        placestore.getTouchingPaths(id).forEach(\n            function(e) {\n                removePath(e.id);\n            }\n        );\n    }\n\n    /**\n     * Removes a path from the SVG and from the placestore\n     * @param {number} id id of the path\n     */\n    function removePath(id) {\n        let path = getSVGShape(id);\n        if (path !== null) {\n            path.remove();\n            placestore.removePath(id);\n        }\n    }\n\n    /**\n     * Sets the background image of the SVG to the current image in filemanager.\n     */\n    function refreshBackgroundImage() {\n        let previewimage = document.getElementsByClassName('realpreview');\n        if (previewimage.length > 0) {\n            let background = document.getElementById('learningmap-background-image');\n            let backgroundurl = previewimage[0].getAttribute('src').split('?')[0];\n            // If the uploaded file reuses the filename of a previously uploaded image, they differ\n            // only in the oid. So one has to append the oid to the url.\n            if (previewimage[0].getAttribute('src').split('?')[1].includes('&oid=')) {\n                backgroundurl += '?oid=' + previewimage[0].getAttribute('src').split('&oid=')[1];\n            }\n            background.setAttribute('xlink:href', backgroundurl);\n        }\n    }\n\n    /**\n     * Adds an eventListener to the background image for watching file changes and updating\n     * height and width of the image.\n     */\n    function registerBackgroundListener() {\n        let background = document.getElementById('learningmap-background-image');\n        if (background) {\n            background.addEventListener('load', function() {\n                background.removeAttribute('height');\n                let height = parseInt(background.getBBox().height);\n                let width = background.getBBox().width;\n                placestore.setBackgroundDimensions(width, height);\n                svgel.setAttribute('viewBox', '0 0 ' + placestore.width + ' ' + placestore.height);\n                background.setAttribute('width', width);\n                background.setAttribute('height', height);\n                updateCode();\n            });\n        }\n    }\n\n    /**\n     * Updates CSS code inside the SVG (called, when one of the colors is changed).\n     * Calls updateCode() when completed.\n     */\n    function updateCSS() {\n        Templates.renderForPromise('mod_learningmap/cssskeleton', placestore.getPlacestore())\n            .then(({html, js}) => {\n                Templates.replaceNode('#learningmap-svgstyle', html, js);\n                updateCode();\n                return true;\n            })\n            .catch(ex => displayException(ex));\n    }\n\n    /**\n     * Updates the activity selector to highlight the activities already used\n     * and to show the alert for hidden activities.\n     */\n    function updateActivities() {\n        let activities = placestore.getAllActivities();\n        let options = Array.from(activitySelector.getElementsByTagName('option'));\n        activityHiddenWarning.setAttribute('hidden', '');\n        options.forEach(function(n) {\n            if (activities.includes(n.value)) {\n                n.classList.add('learningmap-used-activity');\n                if (n.selected) {\n                    if (n.getAttribute('data-activity-hidden') == true) {\n                        activityHiddenWarning.removeAttribute('hidden');\n                    }\n                }\n            } else {\n                n.classList.remove('learningmap-used-activity');\n            }\n        });\n    }\n\n    /**\n     * Adds the event listener to the color chooser buttons.\n     * @param {*} name name of the color\n     * @param {*} secondValue name of a second placestore value that has to be changed along\n     */\n    function colorChooserLogic(name, secondValue = '') {\n        let colorChooser = document.getElementById('learningmap-color-' + name);\n        if (colorChooser) {\n            colorChooser.addEventListener('change', function() {\n                placestore.setColor(name, colorChooser.value);\n                if (secondValue != '') {\n                    placestore.setColor(secondValue, colorChooser.value);\n                }\n                updateCSS();\n            });\n            colorChooser.value = placestore.getColor(name);\n        }\n    }\n\n    /**\n     * Adds the event listener to advanced settings menu items\n     * @param {*} name Name of the item\n     * @param {*} getCall Method of placestore to call to read value\n     * @param {*} setCall Method of placestore to call to save value\n     * @param {*} callback Additional callback after value is saved\n     */\n    function advancedSettingsLogic(name, getCall, setCall, callback = null) {\n        let settingItem = document.getElementById('learningmap-advanced-setting-' + name);\n        if (settingItem) {\n            settingItem.checked = getCall.call(placestore);\n            settingItem.addEventListener('change', function() {\n                setCall.call(placestore, settingItem.checked);\n                if (callback !== null) {\n                    callback();\n                }\n                updateCSS();\n            });\n        }\n    }\n\n    /**\n     * Adds missing text nodes\n     */\n    function fixPlaceLabels() {\n        let options = Array.from(activitySelector.getElementsByTagName('option'));\n        let places = placestore.getPlaces();\n        for (const place of places) {\n            if (document.getElementById('text' + place.id) === null) {\n                let content = '';\n                for (const option of options) {\n                    if (option.value == place.linkedActivity) {\n                        content = option.textContent;\n                        break;\n                    }\n                }\n                let placeNode = mapsvg.findOne('#' + place.id);\n                let textNode = text('text' + place.id, content, placeNode.cx(), placeNode.cy());\n                textNode.addTo(placeNode.parent());\n            }\n        }\n    }\n\n    /**\n     * Hides the advanced settings menu.\n     */\n    function hideAdvancedSettings() {\n        let advancedSettings = document.getElementById('learningmap-advanced-settings');\n        advancedSettings.setAttribute('hidden', '');\n    }\n};\n"],"names":["targetPoints","pathTypes","offset","dragel","pathsToUpdateFirstPoint","pathsToUpdateSecondPoint","prefetchTemplates","selectedElement","firstPlace","secondPlace","lastTarget","elementForActivitySelector","touchstart","touchend","touchmove","mapdiv","document","getElementById","code","activitySetting","activitySelector","activityStarting","activityTarget","activityHiddenWarning","advancedSettingsIcon","treeView","querySelector","setAttribute","iconView","setTimeout","dispatchEvent","Event","addEventListener","setActivityId","value","text","textContent","title","classList","remove","add","updateActivities","updateCode","checked","addStartingPlace","removeStartingPlace","addTargetPlace","removeTargetPlace","placestoreInput","getElementsByName","loadJSON","advancedSettings","getAttribute","hideAdvancedSettings","removeAttribute","hideContextMenu","advancedSettingsClose","advancedSettingsLogic","placestore","getHidePaths","setHidePaths","getUseCheckmark","setUseCheckmark","getHover","setHover","getPulse","setPulse","getShowall","setShowall","getHideStroke","setHideStroke","getShowText","setShowText","options","Array","from","getElementsByTagName","places","getPlaces","place","id","content","option","linkedActivity","placeNode","mapsvg","findOne","cx","cy","addTo","parent","getSliceMode","setSliceMode","getShowWayGone","setShowWayGone","colorChooserLogic","innerHTML","refreshBackgroundImage","background","height","parseInt","getBBox","width","setBackgroundDimensions","svgel","registerBackgroundListener","getMapid","el","startDrag","drag","endDrag","evt","cancelable","preventDefault","target","contains","nodeName","dblclickHandler","touches","showContextMenu","endTouch","getSVGShape","getMousePosition","x","y","getPathsWithFid","getPathsWithSid","attr","pathPoint","transformCoordinates","layerX","layerY","coord","console","log","closest","placeel","center","textNode","amove","forEach","path","pathElement","type","updatePathDeclaration","setBbox","bbox","textel","dx","dy","node","unselectAll","clickHandler","oldDefinition","targetX","targetY","targetP","parts","split","fromX","fromY","toX","toY","bezierX","bezierY","pathType","i","length","makeDraggable","SVG","e","element","activityId","getActivityId","scalingFactor","clientWidth","style","setProperty","clientHeight","display","isStartingPlace","isTargetPlace","updateCSS","backgroundfileNode","MutationObserver","observe","attributes","childList","subtree","clientX","clientY","CTM","getScreenCTM","a","f","d","JSON","stringify","getPlacestore","event","placesgroup","placeId","getId","linkId","svglink","child","link","shapes","emoji","addPlace","getTouchingPaths","removePath","removePlace","circleRadius","plain","move","fid","replace","sid","z","pid","pathsgroup","first","second","x1","y1","x2","y2","classes","addPath","getElementsByClassName","previewimage","backgroundurl","includes","renderForPromise","then","_ref","html","js","replaceNode","catch","ex","activities","getAllActivities","n","selected","name","secondValue","colorChooser","setColor","getColor","getCall","setCall","callback","settingItem","call"],"mappings":"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"}