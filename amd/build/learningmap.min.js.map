{"version":3,"file":"learningmap.min.js","sources":["../src/learningmap.js"],"sourcesContent":["import {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport placestore from 'mod_learningmap/placestore';\n\nconst circleRadius = 10;\n\n// Constants for updatePathDeclaration.\nconst targetPoints = {\n    firstPoint: 1,\n    secondPoint: 2,\n    bezierPoint: 3,\n};\n\nconst pathTypes = {\n    line: 1,\n    quadraticbezier: 2,\n};\n\nexport const init = () => {\n    // Load the needed template on startup for better execution speed.\n    Templates.prefetchTemplates(['mod_learningmap/cssskeleton']);\n\n    // Variable for storing the mouse offset\n    var offset;\n\n    // Variable for draggable element\n    var dragel;\n\n    // Variables for storing the paths that need update of the first or\n    // the second coordinates.\n    var pathsToUpdateFirstPoint, pathsToUpdateSecondPoint;\n\n    // Variables for handling the currently selected elements\n    var selectedElement = null,\n        firstPlace = null,\n        secondPlace = null,\n        lastTarget = null;\n\n    // Variable for storing the selected element for the activity selector\n    var elementForActivitySelector = null;\n\n    // Variables for simulating double click on touch devices, set when the\n    // corresponding events are handled\n    var touchstart = false;\n    var touchend = false;\n    // Counter for touchmove events\n    var touchmove = 0;\n\n    // DOM nodes for the editor\n    let mapdiv = document.getElementById('learningmap-editor-map');\n    let code = document.getElementById('id_introeditor_text');\n\n    // DOM nodes for the activity selector\n    let activitySetting = document.getElementById('learningmap-activity-setting');\n    let activitySelector = document.getElementById('learningmap-activity-selector');\n    let activityStarting = document.getElementById('learningmap-activity-starting');\n    let activityTarget = document.getElementById('learningmap-activity-target');\n    let activityHiddenWarning = document.getElementById('learningmap-activity-hidden-warning');\n    let advancedSettingsIcon = document.getElementById('learningmap-advanced-settings-icon');\n\n    // Hide tree view as there is no preview file we can attach to\n    let treeView = document.querySelector('.fp-viewbar .fp-vb-tree');\n    if (treeView) {\n        treeView.setAttribute('style', 'display: none;');\n    }\n\n    // Trigger click event on icon view to ensure that tree view is not active.\n    let iconView = document.querySelector('.fp-viewbar .fp-vb-icons');\n    if (iconView) {\n        // Handle possible delay in form loading.\n        setTimeout(() => {\n            iconView.dispatchEvent(new Event('click'));\n        }, 1000);\n    }\n\n    // Attach listeners to the activity selector\n    if (activitySelector) {\n        // Show places that are not linked to an activity\n        activitySelector.addEventListener('change', function() {\n            placestore.setActivityId(elementForActivitySelector, activitySelector.value);\n            if (activitySelector.value) {\n                let text = document.getElementById('text' + elementForActivitySelector);\n                if (text) {\n                    text.textContent = activitySelector.querySelector('option[value=\"' + activitySelector.value + '\"]').textContent;\n                }\n                document.getElementById(elementForActivitySelector).classList.remove('learningmap-emptyplace');\n            } else {\n                document.getElementById(elementForActivitySelector).classList.add('learningmap-emptyplace');\n            }\n            updateActivities();\n            updateCode();\n        });\n        // Add / remove a place to the starting places array\n        activityStarting.addEventListener('change', function() {\n            if (activityStarting.checked) {\n                placestore.addStartingPlace(elementForActivitySelector);\n            } else {\n                placestore.removeStartingPlace(elementForActivitySelector);\n            }\n            updateCode();\n        });\n        // Add / remove a place to the target places array\n        activityTarget.addEventListener('change', function() {\n            if (activityTarget.checked) {\n                placestore.addTargetPlace(elementForActivitySelector);\n                document.getElementById(elementForActivitySelector).classList.add('learningmap-targetplace');\n            } else {\n                placestore.removeTargetPlace(elementForActivitySelector);\n                document.getElementById(elementForActivitySelector).classList.remove('learningmap-targetplace');\n            }\n            updateCode();\n        });\n    }\n\n    // Load placestore values from the hidden input field\n    let placestoreInput = document.getElementsByName('placestore')[0];\n    if (placestoreInput) {\n        placestore.loadJSON(placestoreInput.value);\n    }\n\n    // Mark all activities in the placestore as \"used\".\n    updateActivities();\n\n    // Attach listeners to the advanced settings div\n    if (advancedSettingsIcon) {\n        let advancedSettings = document.getElementById('learningmap-advanced-settings');\n        advancedSettingsIcon.addEventListener('click', function() {\n            if (advancedSettings.getAttribute('hidden') === null) {\n                advancedSettings.setAttribute('hidden', '');\n            } else {\n                advancedSettings.removeAttribute('hidden');\n            }\n        });\n        let advancedSettingsClose = document.getElementById('learningmap-advanced-settings-close');\n        if (advancedSettingsClose) {\n            advancedSettingsClose.addEventListener('click', function() {\n                advancedSettings.setAttribute('hidden', '');\n            });\n        }\n\n        advancedSettingsLogic('hidepaths', placestore.getHidePaths, placestore.setHidePaths);\n        advancedSettingsLogic('usecheckmark', placestore.getUseCheckmark, placestore.setUseCheckmark);\n        advancedSettingsLogic('hover', placestore.getHover, placestore.setHover);\n        advancedSettingsLogic('pulse', placestore.getPulse, placestore.setPulse);\n        advancedSettingsLogic('showall', placestore.getShowall, placestore.setShowall);\n        advancedSettingsLogic('hidestroke', placestore.getHideStroke, placestore.setHideStroke);\n        advancedSettingsLogic('showtext', placestore.getShowText, placestore.setShowText, fixPlaceLabels);\n        advancedSettingsLogic('slicemode', placestore.getSliceMode, placestore.setSliceMode);\n    }\n\n    // Attach listener to the color choosers\n    colorChooserLogic('stroke', 'text');\n    colorChooserLogic('place');\n    colorChooserLogic('visited');\n\n    // Get SVG code from the (hidden) textarea field\n    if (code && mapdiv) {\n        mapdiv.innerHTML = code.value;\n    }\n    // Reload background image to get the correct width and height values\n    refreshBackgroundImage();\n    registerBackgroundListener();\n    updateCode();\n\n    // Enable dragging of places\n    let svg = document.getElementById('learningmap-svgmap-' + placestore.getMapid());\n    makeDraggable(svg);\n\n    // Refresh stylesheet values from placestore\n    updateCSS();\n\n    // Add listeners for clicking and context menu\n    if (mapdiv) {\n        mapdiv.addEventListener('dblclick', dblclickHandler);\n        mapdiv.addEventListener('click', clickHandler);\n\n        mapdiv.addEventListener('contextmenu', function(e) {\n            e.preventDefault();\n            showContextMenu(e);\n        }, false);\n    }\n    /**\n     * Shows the context menu at the current mouse position\n     * @param {*} e\n     */\n    function showContextMenu(e) {\n        unselectAll();\n        if (activitySetting) {\n            if (e.touches) {\n                e = e.touches[0];\n            }\n            if (e.target.classList.contains('learningmap-place')) {\n                e.target.classList.add('learningmap-selected-activity-selector');\n                let activityId = placestore.getActivityId(e.target.id);\n                let scalingFactor = mapdiv.clientWidth / 800;\n                activitySetting.style.setProperty('--pos-x', e.target.cx.baseVal.value * scalingFactor + 'px');\n                activitySetting.style.setProperty('--pos-y', e.target.cy.baseVal.value * scalingFactor + 'px');\n                activitySetting.style.setProperty('--map-width', mapdiv.clientWidth + 'px');\n                activitySetting.style.setProperty('--map-height', mapdiv.clientHeight + 'px');\n                activitySetting.style.display = 'block';\n                document.getElementById('learningmap-activity-selector').value = activityId;\n                document.getElementById('learningmap-activity-starting').checked = placestore.isStartingPlace(e.target.id);\n                document.getElementById('learningmap-activity-target').checked = placestore.isTargetPlace(e.target.id);\n                elementForActivitySelector = e.target.id;\n                updateActivities();\n            } else {\n                hideContextMenu();\n            }\n        }\n    }\n\n    /**\n     * Hides the context menu\n     */\n    function hideContextMenu() {\n        let e = document.getElementById(elementForActivitySelector);\n        if (e) {\n            e.classList.remove('learningmap-selected-activity-selector');\n        }\n        activitySetting.style.display = 'none';\n    }\n\n    let backgroundfileNode = document.getElementById('id_introeditor_itemid_fieldset');\n    if (backgroundfileNode) {\n        let observer = new MutationObserver(refreshBackgroundImage);\n        observer.observe(backgroundfileNode, {attributes: true, childList: true, subtree: true});\n    }\n\n    /**\n     * Helper function for getting the right coordinates from the mouse\n     * @param {*} evt\n     * @returns {object}\n     */\n    function getMousePosition(evt) {\n        if (evt.touches) {\n            evt = evt.touches[0];\n        }\n        return transformCoordinates(evt.clientX, evt.clientY);\n    }\n\n    /**\n     * Transforms client coordinates to SVG coordinates\n     * @param {number} x x coordinate to transform\n     * @param {number} y y coordinate to transform\n     * @returns {object} Object containing transformed x and y coordinate\n     */\n    function transformCoordinates(x, y) {\n        var CTM = dragel.getScreenCTM();\n        return {\n            x: (x - CTM.e) / CTM.a,\n            y: (y - CTM.f) / CTM.d\n        };\n    }\n\n    /**\n     * Enables dragging on an DOM node\n     * @param {*} el\n     */\n    function makeDraggable(el) {\n        dragel = el;\n        if (el) {\n            el.addEventListener('mousedown', startDrag);\n            el.addEventListener('mousemove', drag);\n            el.addEventListener('mouseup', endDrag);\n            el.addEventListener('mouseleave', endDrag);\n            el.addEventListener('touchstart', startTouch);\n            el.addEventListener('touchmove', drag);\n            el.addEventListener('touchend', endTouch);\n            el.addEventListener('touchleave', endTouch);\n            el.addEventListener('touchcancel', endTouch);\n        }\n\n        /**\n         * Function called whenn dragging starts.\n         * @param {*} evt\n         */\n        function startDrag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            pathsToUpdateFirstPoint = [];\n            pathsToUpdateSecondPoint = [];\n            if (evt.target.classList.contains('learningmap-draggable')) {\n                selectedElement = evt.target;\n                offset = getMousePosition(evt);\n                offset.x -= parseInt(selectedElement.getAttributeNS(null, \"cx\"));\n                offset.y -= parseInt(selectedElement.getAttributeNS(null, \"cy\"));\n                // Get paths that need to be updated.\n                pathsToUpdateFirstPoint = placestore.getPathsWithFid(selectedElement.id);\n                pathsToUpdateSecondPoint = placestore.getPathsWithSid(selectedElement.id);\n            } else if (evt.target.nodeName == 'text') {\n                selectedElement = evt.target;\n                let place = selectedElement.parentNode.querySelector('.learningmap-place');\n                offset = getMousePosition(evt);\n                offset.x -= parseInt(selectedElement.getAttributeNS(null, \"dx\")) + place.cx.baseVal.value;\n                offset.y -= parseInt(selectedElement.getAttributeNS(null, \"dy\")) + place.cy.baseVal.value;\n            } else if (evt.target.nodeName == 'path') {\n                selectedElement = evt.target;\n                offset = getMousePosition(evt);\n                let pathPoint = transformCoordinates(evt.layerX, evt.layerY);\n                offset.x += pathPoint.x;\n                offset.y += pathPoint.y;\n            }\n        }\n\n        /**\n         * Function called during dragging. Continuously updates circles center coordinates and the\n         * coordinates of the touching paths.\n         * @param {*} evt\n         */\n        function drag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            // Count touchmove events\n            touchmove++;\n            if (selectedElement) {\n                var coord = getMousePosition(evt);\n                let cx = coord.x - offset.x;\n                let cy = coord.y - offset.y;\n                if (selectedElement.nodeName == 'text') {\n                    let place = selectedElement.parentNode.querySelector('.learningmap-place');\n                    // Calculate the delta from the current mouse position to the corresponding place.\n                    // coord: current mouse position\n                    // offset: delta from the mouse position to the coordinates of the text node\n                    let dx = coord.x - offset.x - place.cx.baseVal.value;\n                    let dy = coord.y - offset.y - place.cy.baseVal.value;\n                    selectedElement.setAttributeNS(null, \"dx\", dx);\n                    selectedElement.setAttributeNS(null, \"dy\", dy);\n                }\n                if (selectedElement.nodeName == 'path') {\n                    selectedElement.setAttribute(\n                        'd',\n                        updatePathDeclaration(selectedElement.getAttribute('d'), coord.x, coord.y, targetPoints.bezierPoint)\n                    );\n                }\n                if (selectedElement.nodeName == 'circle') {\n                    selectedElement.setAttributeNS(null, \"cx\", cx);\n                    selectedElement.setAttributeNS(null, \"cy\", cy);\n                    let textNode = document.getElementById('text' + selectedElement.id);\n                    if (textNode !== null) {\n                        textNode.setAttributeNS(null, 'x', cx);\n                        textNode.setAttributeNS(null, 'y', cy);\n                    }\n                    pathsToUpdateFirstPoint.forEach(function(path) {\n                        let pathNode = document.getElementById(path.id);\n                        if (pathNode !== null) {\n                            if (pathNode.nodeName == 'path') {\n                                pathNode.setAttribute(\n                                    'd',\n                                    updatePathDeclaration(pathNode.getAttribute('d'), cx, cy, targetPoints.firstPoint)\n                                );\n                            } else {\n                                pathNode.setAttribute('x1', cx);\n                                pathNode.setAttribute('y1', cy);\n                            }\n                        }\n                    });\n\n                    pathsToUpdateSecondPoint.forEach(function(path) {\n                        let pathNode = document.getElementById(path.id);\n                        if (pathNode !== null) {\n                            if (pathNode.nodeName == 'path') {\n                                pathNode.setAttribute(\n                                    'd',\n                                    updatePathDeclaration(pathNode.getAttribute('d'), cx, cy, targetPoints.secondPoint)\n                                );\n                            } else {\n                                pathNode.setAttribute('x2', cx);\n                                pathNode.setAttribute('y2', cy);\n                            }\n                        }\n                    });\n                }\n            }\n        }\n\n        /**\n         * Function called when dragging ends.\n         * @param {*} evt\n         */\n        function endDrag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            selectedElement = null;\n            unselectAll();\n            updateCode();\n        }\n\n        /**\n         * Function called when touchstart event occurs.\n         * @param {*} evt\n         */\n        function startTouch(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            if (\n                evt.target.classList.contains('learningmap-draggable') ||\n                evt.target.nodeName == 'text' ||\n                evt.target.nodeName == 'path'\n            ) {\n                if (!touchstart) {\n                    touchstart = true;\n                    touchmove = 0;\n                    touchend = false;\n                    setTimeout(\n                        (evt) => {\n                            if (touchmove < 3 && !touchend) {\n                                if (evt.touches) {\n                                    evt = evt.touches[0];\n                                }\n                                showContextMenu(evt);\n                            }\n                        },\n                        2000,\n                        evt\n                    );\n                    setTimeout(\n                        () => {\n                            touchstart = false;\n                        },\n                    300);\n                } else {\n                    dblclickHandler(evt);\n                    touchstart = false;\n                }\n                startDrag(evt);\n            } else {\n                if (!touchstart) {\n                    touchstart = true;\n                    touchend = false;\n                    touchmove = 0;\n                    setTimeout(\n                        () => {\n                            touchstart = false;\n                        },\n                    300);\n                } else {\n                    dblclickHandler(evt);\n                    touchstart = false;\n                }\n            }\n        }\n\n        /**\n         * Function called when touchend, touchleave or touchcancel event occurs.\n         * @param {*} evt\n         */\n        function endTouch(evt) {\n            selectedElement = null;\n            touchend = true;\n            // If there was only a small move (<3 move events), this also counts as a click.\n            if (touchmove < 3 && touchstart) {\n                clickHandler(evt);\n            } else {\n                endDrag(evt);\n            }\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n        }\n\n        /**\n         * Updates the path declaration of lines and quadratic bezier curves setting one of the points.\n         * @param {string} oldDefinition SVG path definition string\n         * @param {number} targetX x coordinate of the point to set\n         * @param {number} targetY y coordinate of the point to set\n         * @param {number} targetP Which point to change (you can use the targetPoints constants here)\n         * @returns {string} Updated SVG path definition\n         */\n        function updatePathDeclaration(oldDefinition, targetX, targetY, targetP = targetPoints.firstPoint) {\n            let parts = oldDefinition.split(' ');\n            let fromX = 0;\n            let fromY = 0;\n            let toX = 0;\n            let toY = 0;\n            let bezierX = 0;\n            let bezierY = 0;\n            let pathType = pathTypes.line;\n\n            // The d attribute of an SVG path in a learning map can have two different formats (in this version):\n            // \"M x1 y1 L x2 y2\"        Line from x1, y1 to x2, y2\n            // \"M x1 y2 Q x3 y3 x2 y2\"  Quadratic bezier curve inside the triangle defined by x1, y1, x2, y2 and x3, y3.\n            for (let i = 0; i < parts.length; i++) {\n                // Every path contains the first point in that way.\n                if (parts[i] == 'M') {\n                    fromX = parseInt(parts[i + 1]);\n                    fromY = parseInt(parts[i + 2]);\n                    i += 2;\n                }\n                // This path is a direct line, so there are only two points in total.\n                if (parts[i] == 'L') {\n                    toX = parseInt(parts[i + 1]);\n                    toY = parseInt(parts[i + 2]);\n                    i += 2;\n                }\n                // This path is a bezier curve, there are three points in total.\n                if (parts[i] == 'Q') {\n                    bezierX = parseInt(parts[i + 1]);\n                    bezierY = parseInt(parts[i + 2]);\n                    toX = parseInt(parts[i + 3]);\n                    toY = parseInt(parts[i + 4]);\n                    i += 4;\n                    pathType = pathTypes.quadraticbezier;\n                }\n            }\n\n            switch (targetP) {\n                case targetPoints.firstPoint:\n                    fromX = targetX;\n                    fromY = targetY;\n                    break;\n                case targetPoints.secondPoint:\n                    toX = targetX;\n                    toY = targetY;\n                    break;\n                case targetPoints.bezierPoint:\n                    // Calculate the third triangle point for the bezier curve.\n                    bezierX = targetX * 2 - (fromX + toX) * 0.5;\n                    bezierY = targetY * 2 - (fromY + toY) * 0.5;\n                    pathType = pathTypes.quadraticbezier;\n                    break;\n            }\n\n            if (pathType == pathTypes.quadraticbezier) {\n                return 'M ' + fromX + ' ' + fromY + ' Q ' + bezierX + ' ' + bezierY + ', ' + toX + ' ' + toY;\n            } else {\n                return 'M ' + fromX + ' ' + fromY + ' L ' + toX + ' ' + toY;\n            }\n        }\n    }\n\n    /**\n     * Updates the form fields for the SVG code and the placestore from the editor.\n     */\n    function updateCode() {\n        if (code && mapdiv) {\n            code.innerHTML = mapdiv.innerHTML;\n        }\n        if (placestoreInput) {\n            document.getElementsByName('placestore')[0].value = JSON.stringify(placestore.getPlacestore());\n        }\n    }\n\n    /**\n     * Handles double clicks on the map\n     * @param {*} event\n     */\n    function dblclickHandler(event) {\n        hideContextMenu();\n        unselectAll();\n        if (event.target.classList.contains('learningmap-mapcontainer') ||\n            event.target.classList.contains('learningmap-background-image')) {\n            addPlace(event);\n        } else if (event.target.classList.contains('learningmap-place')) {\n            if (lastTarget == event.target.id) {\n                lastTarget = null;\n                clickHandler(event);\n            } else {\n                removePlace(event);\n            }\n        } else if (event.target.classList.contains('learningmap-path')) {\n            removePath(event.target.id);\n        }\n        updateCode();\n    }\n\n    /**\n     * Returns an empty title tag with the given id.\n     * @param {*} id id for the title\n     * @returns {any}\n     */\n    function title(id) {\n        let title = document.createElementNS('http://www.w3.org/2000/svg', 'title');\n        title.setAttribute('id', id);\n        return title;\n    }\n\n    /**\n     * Returns an text tag with the given id.\n     * @param {*} id id for the text\n     * @param {*} content content of the tag\n     * @param {*} x x coordinate of the text\n     * @param {*} y y coordinate of the text\n     * @returns {any}\n     */\n     function text(id, content, x, y) {\n        let text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        text.setAttribute('id', id);\n        text.setAttribute('x', x);\n        text.setAttribute('y', y);\n        // Default value for delta: Circle radius * 1.5 (as a padding)\n        text.setAttribute('dx', circleRadius * 1.5);\n        text.setAttribute('dy', circleRadius * 1.5);\n        text.textContent = content;\n        return text;\n    }\n\n    /**\n     * Returns a circle tag with the given dimensions.\n     * @param {*} x x coordinate of the center\n     * @param {*} y y coordinate of the center\n     * @param {*} r radius\n     * @param {*} classes classes to add\n     * @param {*} id id of the circle\n     * @returns {any}\n     */\n    function circle(x, y, r, classes, id) {\n        let circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n        circle.setAttribute('class', classes);\n        circle.setAttribute('id', id);\n        circle.setAttribute('cx', x);\n        circle.setAttribute('cy', y);\n        circle.setAttribute('r', r);\n        return circle;\n    }\n\n    /**\n     * Returns a path between two points.\n     * @param {*} x1 x coordinate of the first point\n     * @param {*} y1 y coordinate of the first point\n     * @param {*} x2 x coordinate of the second point\n     * @param {*} y2 y coordinate of the second point\n     * @param {*} classes CSS classes to set\n     * @param {*} id id of the path\n     * @returns {any}\n     */\n     function path(x1, y1, x2, y2, classes, id) {\n        let path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        path.setAttribute('class', classes);\n        path.setAttribute('id', id);\n        path.setAttribute('d', 'M ' + x1 + ' ' + y1 + ' L ' + x2 + ' ' + y2);\n        return path;\n    }\n\n    /**\n     * Returns a link around a given child element. This function also adds a title element next\n     * to the child for accessibility.\n     * @param {*} child child item to set the link on\n     * @param {*} id id of the link\n     * @param {*} title title of the link\n     * @param {*} text text to describe the link\n     * @returns {any}\n     */\n    function link(child, id, title = null, text = null) {\n        let link = document.createElementNS('http://www.w3.org/2000/svg', 'a');\n        link.setAttribute('id', id);\n        link.setAttribute('xlink:href', '');\n        link.appendChild(child);\n        if (title !== null) {\n            link.appendChild(title);\n        }\n        if (text !== null) {\n            link.appendChild(text);\n        }\n        return link;\n    }\n\n    /**\n     * Adds a place on the SVG map. This function also prepares the code for linking activities\n     * and adding titles (for accessibility).\n     * @param {*} event event causing the command\n     */\n    function addPlace(event) {\n        let placesgroup = document.getElementById('placesGroup');\n        let placeId = 'p' + placestore.getId();\n        let linkId = 'a' + placestore.getId();\n        var CTM = event.target.getScreenCTM();\n        if (event.touches) {\n            event = event.touches[0];\n        }\n        let cx = (event.clientX - CTM.e) / CTM.a;\n        let cy = (event.clientY - CTM.f) / CTM.d;\n        placesgroup.appendChild(\n            link(\n                circle(cx, cy, circleRadius, 'learningmap-place learningmap-draggable learningmap-emptyplace', placeId),\n                linkId,\n                title('title' + placeId),\n                text('text' + placeId, '', cx, cy)\n            )\n        );\n        placestore.addPlace(placeId, linkId);\n    }\n\n    /**\n     * Handles single clicks on the background image.\n     * @param {*} event click event\n     * @returns {void}\n     */\n    function clickHandler(event) {\n        event.preventDefault();\n        hideContextMenu();\n        if (event.target.classList.contains('learningmap-place') && selectedElement === null) {\n            if (firstPlace === null) {\n                firstPlace = event.target.id;\n                document.getElementById(firstPlace).classList.add('learningmap-selected');\n            } else {\n                secondPlace = event.target.id;\n                let fid = parseInt(firstPlace.replace('p', ''));\n                let sid = parseInt(secondPlace.replace('p', ''));\n                if (sid == fid) {\n                    return;\n                }\n                if (sid < fid) {\n                    let z = sid;\n                    sid = fid;\n                    fid = z;\n                }\n                addPath(fid, sid);\n                let first = document.getElementById(firstPlace);\n                if (first) {\n                    first.classList.remove('learningmap-selected');\n                }\n                firstPlace = null;\n                lastTarget = secondPlace;\n                secondPlace = null;\n            }\n        } else {\n            unselectAll();\n            firstPlace = null;\n        }\n    }\n    /**\n     * Removes the classes 'learningmap-selected' and 'learningmap-selectet-activity-selector'\n     * from all nodes\n     */\n    function unselectAll() {\n        Array.from(document.getElementsByClassName('learningmap-selected')).forEach(function(e) {\n            e.classList.remove('learningmap-selected');\n        });\n        Array.from(document.getElementsByClassName('learningmap-selected-activity-selector')).forEach(function(e) {\n            e.classList.remove('learningmap-selected-activity-selector');\n        });\n    }\n\n    /**\n     * Adds a path between two places.\n     * @param {number} fid id of the first place (meant to be the smaller one)\n     * @param {number} sid id of the second place (meant to be the bigger one)\n     */\n    function addPath(fid, sid) {\n        let pid = 'p' + fid + '_' + sid;\n        if (document.getElementById(pid) === null) {\n            let pathsgroup = document.getElementById('pathsGroup');\n            let first = document.getElementById('p' + fid);\n            let second = document.getElementById('p' + sid);\n            if (pathsgroup && first && second) {\n                pathsgroup.appendChild(\n                    path(\n                        first.cx.baseVal.value,\n                        first.cy.baseVal.value,\n                        second.cx.baseVal.value,\n                        second.cy.baseVal.value,\n                        'learningmap-path',\n                        pid\n                    )\n                );\n                placestore.addPath(pid, 'p' + fid, 'p' + sid);\n            }\n        }\n    }\n\n    /**\n     * Removes a place from the SVG and the placestore. This function also removes all\n     * touching paths and entries in statringplaces / targetplaces linking to the removed\n     * place.\n     * @param {any} event event causing the remove order\n     */\n    function removePlace(event) {\n        let place = document.getElementById(event.target.id);\n        let parent = place.parentNode;\n        removePathsTouchingPlace(event.target.id);\n        placestore.removePlace(event.target.id);\n        parent.removeChild(place);\n        parent.parentNode.removeChild(parent);\n\n        updateCode();\n    }\n\n    /**\n     * Removes all paths touching a certain place\n     * @param {number} id id of the place\n     */\n    function removePathsTouchingPlace(id) {\n        placestore.getTouchingPaths(id).forEach(\n            function(e) {\n                removePath(e.id);\n            }\n        );\n    }\n\n    /**\n     * Removes a path from the SVG and from the placestore\n     * @param {number} id id of the path\n     */\n    function removePath(id) {\n        let path = document.getElementById(id);\n        if (path !== null) {\n            path.parentNode.removeChild(path);\n            placestore.removePath(id);\n        }\n    }\n\n    /**\n     * Sets the background image of the SVG to the current image in filemanager.\n     */\n    function refreshBackgroundImage() {\n        let previewimage = document.getElementsByClassName('realpreview');\n        if (previewimage.length > 0) {\n            let background = document.getElementById('learningmap-background-image');\n            let backgroundurl = previewimage[0].getAttribute('src').split('?')[0];\n            // If the uploaded file reuses the filename of a previously uploaded image, they differ\n            // only in the oid. So one has to append the oid to the url.\n            if (previewimage[0].getAttribute('src').split('?')[1].includes('&oid=')) {\n                backgroundurl += '?oid=' + previewimage[0].getAttribute('src').split('&oid=')[1];\n            }\n            background.setAttribute('xlink:href', backgroundurl);\n        }\n    }\n\n    /**\n     * Adds an eventListener to the background image for watching file changes and updating\n     * height and width of the image.\n     */\n    function registerBackgroundListener() {\n        let background = document.getElementById('learningmap-background-image');\n        if (background) {\n            background.addEventListener('load', function() {\n                background.removeAttribute('height');\n                let height = parseInt(background.getBBox().height);\n                let width = background.getBBox().width;\n                placestore.setBackgroundDimensions(width, height);\n                svg.setAttribute('viewBox', '0 0 ' + placestore.width + ' ' + placestore.height);\n                background.setAttribute('width', width);\n                background.setAttribute('height', height);\n                updateCode();\n            });\n        }\n    }\n\n    /**\n     * Updates CSS code inside the SVG (called, when one of the colors is changed).\n     * Calls updateCode() when completed.\n     */\n    function updateCSS() {\n        Templates.renderForPromise('mod_learningmap/cssskeleton', placestore.getPlacestore())\n            .then(({html, js}) => {\n                Templates.replaceNode('#learningmap-svgstyle', html, js);\n                updateCode();\n                return true;\n            })\n            .catch(ex => displayException(ex));\n    }\n\n    /**\n     * Updates the activity selector to highlight the activities already used\n     * and to show the alert for hidden activities.\n     */\n    function updateActivities() {\n        let activities = placestore.getAllActivities();\n        let options = Array.from(activitySelector.getElementsByTagName('option'));\n        activityHiddenWarning.setAttribute('hidden', '');\n        options.forEach(function(n) {\n            if (activities.includes(n.value)) {\n                n.classList.add('learningmap-used-activity');\n                if (n.selected) {\n                    if (n.getAttribute('data-activity-hidden') == true) {\n                        activityHiddenWarning.removeAttribute('hidden');\n                    }\n                }\n            } else {\n                n.classList.remove('learningmap-used-activity');\n            }\n        });\n    }\n\n    /**\n     * Adds the event listener to the color chooser buttons.\n     * @param {*} name name of the color\n     * @param {*} secondValue name of a second placestore value that has to be changed along\n     */\n    function colorChooserLogic(name, secondValue = '') {\n        let colorChooser = document.getElementById('learningmap-color-' + name);\n        if (colorChooser) {\n            colorChooser.addEventListener('change', function() {\n                placestore.setColor(name, colorChooser.value);\n                if (secondValue != '') {\n                    placestore.setColor(secondValue, colorChooser.value);\n                }\n                updateCSS();\n            });\n            colorChooser.value = placestore.getColor(name);\n        }\n    }\n\n    /**\n     * Adds the event listener to advanced settings menu items\n     * @param {*} name Name of the item\n     * @param {*} getCall Method of placestore to call to read value\n     * @param {*} setCall Method of placestore to call to save value\n     * @param {*} callback Additional callback after value is saved\n     */\n    function advancedSettingsLogic(name, getCall, setCall, callback = null) {\n        let settingItem = document.getElementById('learningmap-advanced-setting-' + name);\n        if (settingItem) {\n            settingItem.checked = getCall.call(placestore);\n            settingItem.addEventListener('change', function() {\n                setCall.call(placestore, settingItem.checked);\n                if (callback !== null) {\n                    callback();\n                }\n                updateCSS();\n            });\n        }\n    }\n\n    /**\n     * Adds missing text nodes\n     */\n    function fixPlaceLabels() {\n        let options = Array.from(activitySelector.getElementsByTagName('option'));\n        let places = placestore.getPlaces();\n        for (const place of places) {\n            if (document.getElementById('text' + place.id) === null) {\n                let content = '';\n                for (const option of options) {\n                    if (option.value == place.linkedActivity) {\n                        content = option.textContent;\n                        break;\n                    }\n                }\n                let placeNode = document.getElementById(place.id);\n                let textNode = text('text' + place.id, content, placeNode.cx.baseVal.value, placeNode.cy.baseVal.value);\n                placeNode.parentNode.appendChild(textNode);\n            }\n        }\n    }\n};\n"],"names":["targetPoints","pathTypes","offset","dragel","pathsToUpdateFirstPoint","pathsToUpdateSecondPoint","prefetchTemplates","selectedElement","firstPlace","secondPlace","lastTarget","elementForActivitySelector","touchstart","touchend","touchmove","mapdiv","document","getElementById","code","activitySetting","activitySelector","activityStarting","activityTarget","activityHiddenWarning","advancedSettingsIcon","treeView","querySelector","setAttribute","iconView","setTimeout","dispatchEvent","Event","addEventListener","setActivityId","value","text","textContent","classList","remove","add","updateActivities","updateCode","checked","addStartingPlace","removeStartingPlace","addTargetPlace","removeTargetPlace","placestoreInput","getElementsByName","loadJSON","advancedSettings","getAttribute","removeAttribute","advancedSettingsClose","advancedSettingsLogic","placestore","getHidePaths","setHidePaths","getUseCheckmark","setUseCheckmark","getHover","setHover","getPulse","setPulse","getShowall","setShowall","getHideStroke","setHideStroke","getShowText","setShowText","options","Array","from","getElementsByTagName","places","getPlaces","place","id","content","option","linkedActivity","placeNode","textNode","cx","baseVal","cy","parentNode","appendChild","getSliceMode","setSliceMode","colorChooserLogic","innerHTML","refreshBackgroundImage","background","height","parseInt","getBBox","width","setBackgroundDimensions","svg","registerBackgroundListener","getMapid","showContextMenu","e","unselectAll","touches","target","contains","activityId","getActivityId","scalingFactor","clientWidth","style","setProperty","clientHeight","display","isStartingPlace","isTargetPlace","hideContextMenu","el","startDrag","drag","endDrag","evt","cancelable","preventDefault","nodeName","dblclickHandler","endTouch","getMousePosition","x","getAttributeNS","y","getPathsWithFid","getPathsWithSid","pathPoint","transformCoordinates","layerX","layerY","coord","dx","dy","setAttributeNS","updatePathDeclaration","forEach","path","pathNode","clickHandler","oldDefinition","targetX","targetY","targetP","parts","split","fromX","fromY","toX","toY","bezierX","bezierY","pathType","i","length","makeDraggable","updateCSS","backgroundfileNode","MutationObserver","observe","attributes","childList","subtree","clientX","clientY","CTM","getScreenCTM","a","f","d","JSON","stringify","getPlacestore","event","placesgroup","placeId","getId","linkId","child","title","link","createElementNS","r","classes","circle","addPlace","parent","getTouchingPaths","removePath","removePlace","removeChild","circleRadius","fid","replace","sid","z","pid","pathsgroup","first","second","x1","y1","x2","y2","addPath","getElementsByClassName","previewimage","backgroundurl","includes","renderForPromise","then","_ref","html","js","replaceNode","catch","ex","activities","getAllActivities","n","selected","name","secondValue","colorChooser","setColor","getColor","getCall","setCall","callback","settingItem","call"],"mappings":"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"}