{"version":3,"file":"learningmap.min.js","sources":["../src/learningmap.js"],"sourcesContent":["import {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport placestore from 'mod_learningmap/placestore';\n\nexport const init = () => {\n    // Load the needed template on startup for better execution speed.\n    Templates.prefetchTemplates(['mod_learningmap/cssskeleton']);\n\n    // Variable for storing the mouse offset\n    var offset;\n\n    // Variable for draggable element\n    var dragel;\n\n    // Variables for storing the paths that need update of the first (upd1) or\n    // the second (upd2) coordinates.\n    var upd1, upd2;\n\n    // Variables for handling the currently selected elements\n    var selectedElement = null,\n        firstPlace = null,\n        secondPlace = null,\n        lastTarget = null;\n\n    // Variable for storing the selected element for the activity selector\n    var elementForActivitySelector = null;\n\n    // Variables for simulating double click on touch devices, set when the\n    // corresponding events are handled\n    var touchstart = false;\n    var touchend = false;\n    // Counter for touchmove events\n    var touchmove = 0;\n\n    // DOM nodes for the editor\n    let mapdiv = document.getElementById('learningmap-editor-map');\n    let code = document.getElementById('id_introeditor_text');\n    let colorChooserPlace = document.getElementById('learningmap-color-place');\n    let colorChooserVisited = document.getElementById('learningmap-color-visited');\n    let colorChooserPath = document.getElementById('learningmap-color-path');\n\n    // DOM nodes for the activity selector\n    let activitySetting = document.getElementById('learningmap-activity-setting');\n    let activitySelector = document.getElementById('learningmap-activity-selector');\n    let activityStarting = document.getElementById('learningmap-activity-starting');\n    let activityTarget = document.getElementById('learningmap-activity-target');\n    let activityHiddenWarning = document.getElementById('learningmap-activity-hidden-warning');\n    let advancedSettingsIcon = document.getElementById('learningmap-advanced-settings-icon');\n\n    // Hide tree view as there is no preview file we can attach to\n    let treeView = document.querySelector('.fp-viewbar .fp-vb-tree');\n    if (treeView) {\n        treeView.setAttribute('style', 'display: none;');\n    }\n\n    // Trigger click event on icon view to ensure that tree view is not active.\n    let iconView = document.querySelector('.fp-viewbar .fp-vb-icons');\n    if (iconView) {\n        // Handle possible delay in form loading.\n        setTimeout(() => {\n            iconView.dispatchEvent(new Event('click'));\n        }, 1000);\n    }\n\n    // Attach listeners to the activity selector\n    if (activitySelector) {\n        // Show places that are not linked to an activity\n        activitySelector.addEventListener('change', function() {\n            placestore.setActivityId(elementForActivitySelector, activitySelector.value);\n            if (activitySelector.value) {\n                document.getElementById(elementForActivitySelector).classList.remove('learningmap-emptyplace');\n            } else {\n                document.getElementById(elementForActivitySelector).classList.add('learningmap-emptyplace');\n            }\n            updateActivities();\n            updateCode();\n        });\n        // Add / remove a place to the starting places array\n        activityStarting.addEventListener('change', function() {\n            if (activityStarting.checked) {\n                placestore.addStartingPlace(elementForActivitySelector);\n            } else {\n                placestore.removeStartingPlace(elementForActivitySelector);\n            }\n            updateCode();\n        });\n        // Add / remove a place to the target places array\n        activityTarget.addEventListener('change', function() {\n            if (activityTarget.checked) {\n                placestore.addTargetPlace(elementForActivitySelector);\n                document.getElementById(elementForActivitySelector).classList.add('learningmap-targetplace');\n            } else {\n                placestore.removeTargetPlace(elementForActivitySelector);\n                document.getElementById(elementForActivitySelector).classList.remove('learningmap-targetplace');\n            }\n            updateCode();\n        });\n    }\n\n    // Load placestore values from the hidden input field\n    let placestoreInput = document.getElementsByName('placestore')[0];\n    if (placestoreInput) {\n        placestore.loadJSON(placestoreInput.value);\n    }\n\n    // Mark all activities in the placestore as \"used\".\n    updateActivities();\n\n    // Attach listeners to the advanced settings div\n    if (advancedSettingsIcon) {\n        let advancedSettings = document.getElementById('learningmap-advanced-settings');\n        advancedSettingsIcon.addEventListener('click', function() {\n            if (advancedSettings.getAttribute('hidden') === null) {\n                advancedSettings.setAttribute('hidden', '');\n            } else {\n                advancedSettings.removeAttribute('hidden');\n            }\n        });\n        let advancedSettingsClose = document.getElementById('learningmap-advanced-settings-close');\n        if (advancedSettingsClose) {\n            advancedSettingsClose.addEventListener('click', function() {\n                advancedSettings.setAttribute('hidden', '');\n            });\n        }\n\n        let hidepaths = document.getElementById('learningmap-hidepaths');\n        // Attach a listener to the hidepaths checkbox\n        if (hidepaths) {\n            hidepaths.checked = placestore.getHidePaths();\n            hidepaths.addEventListener('change', function() {\n                placestore.setHidePaths(hidepaths.checked);\n                updateCSS();\n            });\n        }\n\n        let hidestroke = document.getElementById('learningmap-hidestroke');\n        // Attach a listener to the hidestrokescheckbox\n        if (hidestroke) {\n            hidestroke.checked = placestore.getStrokeOpacity() < 1;\n            hidestroke.addEventListener('change', function() {\n                placestore.setStrokeOpacity(hidestroke.checked ? 0 : 1);\n                updateCSS();\n            });\n        }\n\n        let usecheckmark = document.getElementById('learningmap-usecheckmark');\n        // Attach a listener to the usecheckmark checkbox\n        if (usecheckmark) {\n            usecheckmark.checked = placestore.getUseCheckmark();\n            usecheckmark.addEventListener('change', function() {\n                placestore.setUseCheckmark(usecheckmark.checked);\n                updateCSS();\n            });\n        }\n\n        let hover = document.getElementById('learningmap-hover');\n        // Attach a listener to the hover checkbox\n        if (hover) {\n            hover.checked = placestore.getHover();\n            hover.addEventListener('change', function() {\n                placestore.setHover(hover.checked);\n                updateCSS();\n            });\n        }\n\n        let pulse = document.getElementById('learningmap-pulse');\n        // Attach a listener to the pulse checkbox\n        if (pulse) {\n            pulse.checked = placestore.getPulse();\n            pulse.addEventListener('change', function() {\n                placestore.setPulse(pulse.checked);\n                updateCSS();\n            });\n        }\n\n        let showall = document.getElementById('learningmap-showall');\n        // Attach a listener to the showall checkbox\n        if (showall) {\n            showall.checked = placestore.getShowall();\n            showall.addEventListener('change', function() {\n                placestore.setShowall(showall.checked);\n                updateCSS();\n            });\n        }\n}\n\n    // Attach listener to the color choosers for paths\n    if (colorChooserPath) {\n        colorChooserPath.addEventListener('change', function() {\n            placestore.setColor('stroke', colorChooserPath.value);\n            updateCSS();\n        });\n        colorChooserPath.value = placestore.getColor('stroke');\n    }\n\n    // Attach listener to the color choosers for places\n    if (colorChooserPlace) {\n        colorChooserPlace.addEventListener('change', function() {\n            placestore.setColor('place', colorChooserPlace.value);\n            updateCSS();\n        });\n        colorChooserPlace.value = placestore.getColor('place');\n    }\n\n    // Attach listener to the color choosers for visited places\n    if (colorChooserVisited) {\n        colorChooserVisited.addEventListener('change', function() {\n            placestore.setColor('visited', colorChooserVisited.value);\n            updateCSS();\n        });\n        colorChooserVisited.value = placestore.getColor('visited');\n    }\n\n    // Get SVG code from the (hidden) textarea field\n    if (code && mapdiv) {\n        mapdiv.innerHTML = code.value;\n    }\n    // Reload background image to get the correct width and height values\n    refreshBackgroundImage();\n    registerBackgroundListener();\n    updateCode();\n\n    // Enable dragging of places\n    let svg = document.getElementById('learningmap-svgmap-' + placestore.getMapid());\n    makeDraggable(svg);\n\n    // Refresh stylesheet values from placestore\n    updateCSS();\n\n    // Add listeners for clicking and context menu\n    if (mapdiv) {\n        mapdiv.addEventListener('dblclick', dblclickHandler);\n        mapdiv.addEventListener('click', clickHandler);\n\n        mapdiv.addEventListener('contextmenu', function(e) {\n            e.preventDefault();\n            showContextMenu(e);\n        }, false);\n    }\n    /**\n     * Shows the context menu at the current mouse position\n     * @param {*} e\n     */\n    function showContextMenu(e) {\n        unselectAll();\n        if (activitySetting) {\n            if (e.touches) {\n                e = e.touches[0];\n            }\n            if (e.target.classList.contains('learningmap-place')) {\n                e.target.classList.add('learningmap-selected-activity-selector');\n                let activityId = placestore.getActivityId(e.target.id);\n                let scalingFactor = mapdiv.clientWidth / 800;\n                activitySetting.style.setProperty('--pos-x', e.target.cx.baseVal.value * scalingFactor + 'px');\n                activitySetting.style.setProperty('--pos-y', e.target.cy.baseVal.value * scalingFactor + 'px');\n                activitySetting.style.setProperty('--map-width', mapdiv.clientWidth + 'px');\n                activitySetting.style.setProperty('--map-height', mapdiv.clientHeight + 'px');\n                activitySetting.style.display = 'block';\n                document.getElementById('learningmap-activity-selector').value = activityId;\n                document.getElementById('learningmap-activity-starting').checked = placestore.isStartingPlace(e.target.id);\n                document.getElementById('learningmap-activity-target').checked = placestore.isTargetPlace(e.target.id);\n                elementForActivitySelector = e.target.id;\n                updateActivities();\n            } else {\n                hideContextMenu();\n            }\n        }\n    }\n\n    /**\n     * Hides the context menu\n     */\n    function hideContextMenu() {\n        let e = document.getElementById(elementForActivitySelector);\n        if (e) {\n            e.classList.remove('learningmap-selected-activity-selector');\n        }\n        activitySetting.style.display = 'none';\n    }\n\n    let backgroundfileNode = document.getElementById('id_introeditor_itemid_fieldset');\n    if (backgroundfileNode) {\n        let observer = new MutationObserver(refreshBackgroundImage);\n        observer.observe(backgroundfileNode, {attributes: true, childList: true, subtree: true});\n    }\n\n    /**\n     * Helper function for getting the right coordinates from the mouse\n     * @param {*} evt\n     * @returns {object}\n     */\n    function getMousePosition(evt) {\n        var CTM = dragel.getScreenCTM();\n        if (evt.touches) {\n            evt = evt.touches[0];\n        }\n        return {\n            x: (evt.clientX - CTM.e) / CTM.a,\n            y: (evt.clientY - CTM.f) / CTM.d\n        };\n    }\n\n    /**\n     * Enables dragging on an DOM node\n     * @param {*} el\n     */\n    function makeDraggable(el) {\n        dragel = el;\n        if (el) {\n            el.addEventListener('mousedown', startDrag);\n            el.addEventListener('mousemove', drag);\n            el.addEventListener('mouseup', endDrag);\n            el.addEventListener('mouseleave', endDrag);\n            el.addEventListener('touchstart', startTouch);\n            el.addEventListener('touchmove', drag);\n            el.addEventListener('touchend', endTouch);\n            el.addEventListener('touchleave', endTouch);\n            el.addEventListener('touchcancel', endTouch);\n        }\n\n        /**\n         * Function called whenn dragging starts.\n         * @param {*} evt\n         */\n        function startDrag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            if (evt.target.classList.contains('learningmap-draggable')) {\n                selectedElement = evt.target;\n                offset = getMousePosition(evt);\n                offset.x -= parseInt(selectedElement.getAttributeNS(null, \"cx\"));\n                offset.y -= parseInt(selectedElement.getAttributeNS(null, \"cy\"));\n                // Get paths that need to be updated.\n                upd1 = placestore.getPathsWithFid(selectedElement.id);\n                upd2 = placestore.getPathsWithSid(selectedElement.id);\n            }\n        }\n\n        /**\n         * Function called during dragging. Continuously updates circles center coordinates and the\n         * coordinates of the touching paths.\n         * @param {*} evt\n         */\n        function drag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            // Count touchmove events\n            touchmove++;\n            if (selectedElement) {\n                var coord = getMousePosition(evt);\n                let cx = coord.x - offset.x;\n                let cy = coord.y - offset.y;\n                selectedElement.setAttributeNS(null, \"cx\", cx);\n                selectedElement.setAttributeNS(null, \"cy\", cy);\n\n                upd1.forEach(function(p) {\n                    let d = document.getElementById(p.id);\n                    if (!(d === null)) {\n                        if (d.nodeName == 'path') {\n                            let pathDeclaration = d.getAttribute('d');\n                            let newPathDeclaration = 'M ' + cx + ' ' + cy + ' L' + pathDeclaration.split('L')[1];\n                            d.setAttribute('d', newPathDeclaration);\n                        } else {\n                            d.setAttribute('x1', cx);\n                            d.setAttribute('y1', cy);\n                        }\n                    }\n                });\n\n                upd2.forEach(function(p) {\n                    let d = document.getElementById(p.id);\n                    if (!(d === null)) {\n                        if (d.nodeName == 'path') {\n                            let pathDeclaration = d.getAttribute('d');\n                            let newPathDeclaration = pathDeclaration.split('L')[0] + 'L ' + cx + ' ' + cy;\n                            d.setAttribute('d', newPathDeclaration);\n                        } else {\n                            d.setAttribute('x2', cx);\n                            d.setAttribute('y2', cy);\n                        }\n                    }\n                });\n            }\n        }\n\n        /**\n         * Function called when dragging ends.\n         * @param {*} evt\n         */\n        function endDrag(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            selectedElement = null;\n            unselectAll();\n            updateCode();\n        }\n\n        /**\n         * Function called when touchstart event occurs.\n         * @param {*} evt\n         */\n        function startTouch(evt) {\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n            if (evt.target.classList.contains('learningmap-draggable')) {\n                if (!touchstart) {\n                    touchstart = true;\n                    touchmove = 0;\n                    touchend = false;\n                    setTimeout(\n                        (evt) => {\n                            if (touchmove < 3 && !touchend) {\n                                if (evt.touches) {\n                                    evt = evt.touches[0];\n                                }\n                                showContextMenu(evt);\n                            }\n                        },\n                        2000,\n                        evt\n                    );\n                    setTimeout(\n                        () => {\n                            touchstart = false;\n                        },\n                    300);\n                } else {\n                    dblclickHandler(evt);\n                    touchstart = false;\n                }\n                startDrag(evt);\n            } else {\n                if (!touchstart) {\n                    touchstart = true;\n                    touchend = false;\n                    touchmove = 0;\n                    setTimeout(\n                        () => {\n                            touchstart = false;\n                        },\n                    300);\n                } else {\n                    dblclickHandler(evt);\n                    touchstart = false;\n                }\n            }\n        }\n\n        /**\n         * Function called when touchend, touchleave or touchcancel event occurs.\n         * @param {*} evt\n         */\n        function endTouch(evt) {\n            selectedElement = null;\n            touchend = true;\n            // If there was only a small move (<3 move events), this also counts as a click.\n            if (touchmove < 3 && touchstart) {\n                clickHandler(evt);\n            } else {\n                endDrag(evt);\n            }\n            if (evt.cancelable) {\n                evt.preventDefault();\n            }\n        }\n    }\n\n    /**\n     * Updates the form fields for the SVG code and the placestore from the editor.\n     */\n    function updateCode() {\n        if (code && mapdiv) {\n            code.innerHTML = mapdiv.innerHTML;\n        }\n        if (placestoreInput) {\n            document.getElementsByName('placestore')[0].value = JSON.stringify(placestore.getPlacestore());\n        }\n    }\n\n    /**\n     * Handles double clicks on the map\n     * @param {*} event\n     */\n    function dblclickHandler(event) {\n        hideContextMenu();\n        unselectAll();\n        if (event.target.classList.contains('learningmap-mapcontainer') ||\n            event.target.classList.contains('learningmap-background-image')) {\n            addPlace(event);\n        } else if (event.target.classList.contains('learningmap-place')) {\n            if (lastTarget == event.target.id) {\n                lastTarget = null;\n                clickHandler(event);\n            } else {\n                removePlace(event);\n            }\n        } else if (event.target.classList.contains('learningmap-path')) {\n            removePath(event.target.id);\n        }\n        updateCode();\n    }\n\n    /**\n     * Returns an empty title tag with the given id.\n     * @param {*} id id for the title\n     * @returns {any}\n     */\n    function title(id) {\n        let title = document.createElementNS('http://www.w3.org/2000/svg', 'title');\n        title.setAttribute('id', id);\n        return title;\n    }\n\n    /**\n     * Returns a circle tag with the given dimensions.\n     * @param {*} x x coordinate of the center\n     * @param {*} y y coordinate of the center\n     * @param {*} r radius\n     * @param {*} classes classes to add\n     * @param {*} id id of the circle\n     * @returns {any}\n     */\n    function circle(x, y, r, classes, id) {\n        let circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n        circle.setAttribute('class', classes);\n        circle.setAttribute('id', id);\n        circle.setAttribute('cx', x);\n        circle.setAttribute('cy', y);\n        circle.setAttribute('r', r);\n        return circle;\n    }\n\n    /**\n     * Returns a path between two points.\n     * @param {*} x1 x coordinate of the first point\n     * @param {*} y1 y coordinate of the first point\n     * @param {*} x2 x coordinate of the second point\n     * @param {*} y2 y coordinate of the second point\n     * @param {*} classes CSS classes to set\n     * @param {*} id id of the path\n     * @returns {any}\n     */\n     function path(x1, y1, x2, y2, classes, id) {\n        let path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        path.setAttribute('class', classes);\n        path.setAttribute('id', id);\n        path.setAttribute('d', 'M ' + x1 + ' ' + y1 + ' L ' + x2 + ' ' + y2);\n        return path;\n    }\n\n    /**\n     * Returns a link around a given child element. This function also adds a title element next\n     * to the child for accessibility.\n     * @param {*} child child item to set the link on\n     * @param {*} id id of the link\n     * @param {*} title title of the link\n     * @returns {any}\n     */\n    function link(child, id, title = null) {\n        let link = document.createElementNS('http://www.w3.org/2000/svg', 'a');\n        link.setAttribute('id', id);\n        link.setAttribute('xlink:href', '');\n        link.appendChild(child);\n        if (!(title === null)) {\n            link.appendChild(title);\n        }\n        return link;\n    }\n\n    /**\n     * Adds a place on the SVG map. This function also prepares the code for linking activities\n     * and adding titles (for accessibility).\n     * @param {*} event event causing the command\n     */\n    function addPlace(event) {\n        let placesgroup = document.getElementById('placesGroup');\n        let placeId = 'p' + placestore.getId();\n        let linkId = 'a' + placestore.getId();\n        var CTM = event.target.getScreenCTM();\n        if (event.touches) {\n            event = event.touches[0];\n        }\n        let cx = (event.clientX - CTM.e) / CTM.a;\n        let cy = (event.clientY - CTM.f) / CTM.d;\n        placesgroup.appendChild(\n            link(\n                circle(cx, cy, 10, 'learningmap-place learningmap-draggable learningmap-emptyplace', placeId),\n                linkId,\n                title('title' + placeId)\n            )\n        );\n        placestore.addPlace(placeId, linkId);\n    }\n\n    /**\n     * Handles single clicks on the background image.\n     * @param {*} event click event\n     * @returns {void}\n     */\n    function clickHandler(event) {\n        event.preventDefault();\n        hideContextMenu();\n        if (event.target.classList.contains('learningmap-place') && selectedElement === null) {\n            if (firstPlace === null) {\n                firstPlace = event.target.id;\n                document.getElementById(firstPlace).classList.add('learningmap-selected');\n            } else {\n                secondPlace = event.target.id;\n                let fid = parseInt(firstPlace.replace('p', ''));\n                let sid = parseInt(secondPlace.replace('p', ''));\n                if (sid == fid) {\n                    return;\n                }\n                if (sid < fid) {\n                    let z = sid;\n                    sid = fid;\n                    fid = z;\n                }\n                addPath(fid, sid);\n                let first = document.getElementById(firstPlace);\n                if (first) {\n                    first.classList.remove('learningmap-selected');\n                }\n                firstPlace = null;\n                lastTarget = secondPlace;\n                secondPlace = null;\n            }\n        } else {\n            unselectAll();\n            firstPlace = null;\n        }\n    }\n    /**\n     * Removes the classes 'learningmap-selected' and 'learningmap-selectet-activity-selector'\n     * from all nodes\n     */\n    function unselectAll() {\n        Array.from(document.getElementsByClassName('learningmap-selected')).forEach(function(e) {\n            e.classList.remove('learningmap-selected');\n        });\n        Array.from(document.getElementsByClassName('learningmap-selected-activity-selector')).forEach(function(e) {\n            e.classList.remove('learningmap-selected-activity-selector');\n        });\n    }\n\n    /**\n     * Adds a path between two places.\n     * @param {number} fid id of the first place (meant to be the smaller one)\n     * @param {number} sid id of the second place (meant to be the bigger one)\n     */\n    function addPath(fid, sid) {\n        let pid = 'p' + fid + '_' + sid;\n        if (document.getElementById(pid) === null) {\n            let pathsgroup = document.getElementById('pathsGroup');\n            let first = document.getElementById('p' + fid);\n            let second = document.getElementById('p' + sid);\n            if (pathsgroup && first && second) {\n                pathsgroup.appendChild(\n                    path(\n                        first.cx.baseVal.value,\n                        first.cy.baseVal.value,\n                        second.cx.baseVal.value,\n                        second.cy.baseVal.value,\n                        'learningmap-path',\n                        pid\n                    )\n                );\n                placestore.addPath(pid, 'p' + fid, 'p' + sid);\n            }\n        }\n    }\n\n    /**\n     * Removes a place from the SVG and the placestore. This function also removes all\n     * touching paths and entries in statringplaces / targetplaces linking to the removed\n     * place.\n     * @param {any} event event causing the remove order\n     */\n    function removePlace(event) {\n        let place = document.getElementById(event.target.id);\n        let parent = place.parentNode;\n        removePathsTouchingPlace(event.target.id);\n        placestore.removePlace(event.target.id);\n        parent.removeChild(place);\n        parent.parentNode.removeChild(parent);\n\n        updateCode();\n    }\n\n    /**\n     * Removes all paths touching a certain place\n     * @param {number} id id of the place\n     */\n    function removePathsTouchingPlace(id) {\n        placestore.getTouchingPaths(id).forEach(\n            function(e) {\n                removePath(e.id);\n            }\n        );\n    }\n\n    /**\n     * Removes a path from the SVG and from the placestore\n     * @param {number} id id of the path\n     */\n    function removePath(id) {\n        let path = document.getElementById(id);\n        if (!(path === null)) {\n            path.parentNode.removeChild(path);\n            placestore.removePath(id);\n        }\n    }\n\n    /**\n     * Sets the background image of the SVG to the current image in filemanager.\n     */\n    function refreshBackgroundImage() {\n        let previewimage = document.getElementsByClassName('realpreview');\n        if (previewimage.length > 0) {\n            let background = document.getElementById('learningmap-background-image');\n            let backgroundurl = previewimage[0].getAttribute('src').split('?')[0];\n            // If the uploaded file reuses the filename of a previously uploaded image, they differ\n            // only in the oid. So one has to append the oid to the url.\n            if (previewimage[0].getAttribute('src').split('?')[1].includes('&oid=')) {\n                backgroundurl += '?oid=' + previewimage[0].getAttribute('src').split('&oid=')[1];\n            }\n            background.setAttribute('xlink:href', backgroundurl);\n        }\n    }\n\n    /**\n     * Adds an eventListener to the background image for watching file changes and updating\n     * height and width of the image.\n     */\n    function registerBackgroundListener() {\n        let background = document.getElementById('learningmap-background-image');\n        if (background) {\n            background.addEventListener('load', function() {\n                background.removeAttribute('height');\n                let height = parseInt(background.getBBox().height);\n                let width = background.getBBox().width;\n                placestore.setBackgroundDimensions(width, height);\n                svg.setAttribute('viewBox', '0 0 ' + placestore.width + ' ' + placestore.height);\n                background.setAttribute('width', width);\n                background.setAttribute('height', height);\n                updateCode();\n            });\n        }\n    }\n\n    /**\n     * Updates CSS code inside the SVG (called, when one of the colors is changed).\n     * Calls updateCode() when completed.\n     */\n    function updateCSS() {\n        Templates.renderForPromise('mod_learningmap/cssskeleton', placestore.getPlacestore())\n            .then(({html, js}) => {\n                Templates.replaceNode('#learningmap-svgstyle', html, js);\n                updateCode();\n                return true;\n            })\n            .catch(ex => displayException(ex));\n    }\n\n    /**\n     * Updates the activity selector to highlight the activities already used\n     * and to show the alert for hidden activities.\n     */\n    function updateActivities() {\n        let activities = placestore.getAllActivities();\n        let options = Array.from(activitySelector.getElementsByTagName('option'));\n        activityHiddenWarning.setAttribute('hidden', '');\n        options.forEach(function(n) {\n            if (activities.includes(n.value)) {\n                n.classList.add('learningmap-used-activity');\n                if (n.selected) {\n                    if (n.getAttribute('data-activity-hidden') == true) {\n                        activityHiddenWarning.removeAttribute('hidden');\n                    }\n                }\n            } else {\n                n.classList.remove('learningmap-used-activity');\n            }\n        });\n    }\n};\n"],"names":["offset","dragel","upd1","upd2","prefetchTemplates","selectedElement","firstPlace","secondPlace","lastTarget","elementForActivitySelector","touchstart","touchend","touchmove","mapdiv","document","getElementById","code","colorChooserPlace","colorChooserVisited","colorChooserPath","activitySetting","activitySelector","activityStarting","activityTarget","activityHiddenWarning","advancedSettingsIcon","treeView","querySelector","setAttribute","iconView","setTimeout","dispatchEvent","Event","addEventListener","setActivityId","value","classList","remove","add","updateActivities","updateCode","checked","addStartingPlace","removeStartingPlace","addTargetPlace","removeTargetPlace","placestoreInput","getElementsByName","loadJSON","advancedSettings","getAttribute","removeAttribute","advancedSettingsClose","hidepaths","placestore","getHidePaths","setHidePaths","updateCSS","hidestroke","getStrokeOpacity","setStrokeOpacity","usecheckmark","getUseCheckmark","setUseCheckmark","hover","getHover","setHover","pulse","getPulse","setPulse","showall","getShowall","setShowall","setColor","getColor","innerHTML","refreshBackgroundImage","background","height","parseInt","getBBox","width","setBackgroundDimensions","svg","registerBackgroundListener","getMapid","showContextMenu","e","unselectAll","touches","target","contains","activityId","getActivityId","id","scalingFactor","clientWidth","style","setProperty","cx","baseVal","cy","clientHeight","display","isStartingPlace","isTargetPlace","hideContextMenu","el","startDrag","drag","endDrag","evt","cancelable","preventDefault","dblclickHandler","endTouch","getMousePosition","x","getAttributeNS","y","getPathsWithFid","getPathsWithSid","coord","setAttributeNS","forEach","p","d","nodeName","pathDeclaration","newPathDeclaration","split","clickHandler","makeDraggable","backgroundfileNode","MutationObserver","observe","attributes","childList","subtree","CTM","getScreenCTM","clientX","a","clientY","f","JSON","stringify","getPlacestore","event","placesgroup","placeId","getId","linkId","appendChild","child","title","link","createElementNS","r","classes","circle","addPlace","place","parent","parentNode","getTouchingPaths","removePath","removePlace","removeChild","fid","replace","sid","z","pid","pathsgroup","first","second","x1","y1","x2","y2","path","addPath","Array","from","getElementsByClassName","previewimage","length","backgroundurl","includes","renderForPromise","then","_ref","html","js","replaceNode","catch","ex","activities","getAllActivities","options","getElementsByTagName","n","selected"],"mappings":"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"}